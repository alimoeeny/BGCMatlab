function [DATA, Template] = CalcTemplatesFromMean(DATA, MeanSpike, varargin);        usethisdata = 0;  %in general, calculatekeepscores = 0;    j = 1;    while j <= length(varargin)        if strncmpi(varargin{j},'stdtemplate',6)            x = sscanf(varargin{j},'stdtemplate%d');            if x > 0                DATA.usestdtemplates = x;            else                DATA.usestdtemplates = 1;            end        elseif strncmpi(varargin{j},'keepscores',6)            keepscores = 1;        end        j = j+1;    end    cl = DATA.currentcluster;    DATA.TemplateScores = zeros(DATA.nevents, 12);    DATA.TemplateLabels = AllV.TemplateLabels(DATA,DATA.usestdtemplates);    [Scores, DATA.TemplateUsed, a] = AllV.CalcScores(DATA,MeanSpike);    Template.otherTemplates = a.otherTemplate;        if DATA.profiling && isfield(a,'endtime')        fprintf('Return from Calcscores took %.4f\n',mytoc(a.endtime));    end    if isfield(MeanSpike,'vdprime')        chspk = DATA.chspk(DATA.chspk <= size(MeanSpike.vdprime,1));        DATA.DprimeUsed = MeanSpike.vdprime(chspk,:);    elseif isfield(a,'vdprime') % e.g. if used Std Templates        chspk = DATA.chspk(DATA.chspk <= size(a.vdprime,1));        DATA.DprimeUsed = a.vdprime(chspk,:);    end    if 0 % do this in ClassifySpikes not here. I.e. If look at this space but cut no cluster, don't change        if DATA.currentcluster > 1            DATA.cluster.next{cl-1}.mumeanUsed = MeanSpike.mu(chspk,:);            DATA.cluster.next{cl-1}.DprimeUsed = MeanSpike.vdprime(chspk,:);        else            DATA.cluster.mumeanUsed = MeanSpike.mu(chspk,:);            DATA.cluster.DprimeUsed = MeanSpike.vdprime(chspk,:);        end    end    DATA.templatecluster = DATA.currentcluster;    if isfield(DATA,'trueprobe')        chspk = AllV.GetProbeList(DATA);        ispk = find(DATA.chspk == DATA.trueprobe);    else        ispk = find(DATA.chspk == DATA.probe(1));    end    if isempty(ispk) && strncmp(DATA.DataType,'MicroWire',8)        ispk = 1;    elseif isempty(ispk)        chspk = [chspk DATA.probe];        ispk = find(DATA.chspk == DATA.probe(1));    end    DATA.tmpdips = zeros(1,8);    if isfield(DATA,'TemplateScores')    oldscores = DATA.TemplateScores;    end    if DATA.usestdtemplates        %Scores is n probe * 2M template types * nevents        DATA.ntemplates = a.ntemplates;        n = size(Scores,2);                for j = 1:size(Scores,1); %probes            o = (j-1)*n; %t1p1, t2p1...            DATA.TemplateScores(:,(1+o):(o+n)) = squeeze(Scores(j,:,:))';        end        DATA = NormalizeTemplates(DATA);        Template = DATA.TemplateUsed;        return;    end    Template.mumean = MeanSpike.mu;    Template.Dprime = DATA.DprimeUsed;    Template.Template = MeanSpike.ms;    if size(Scores,1) >= ispk        DATA.TemplateScores(:,1)= Scores(ispk,1,:); %r for trigger probe        DATA.TemplateScores(:,8)= Scores(ispk,2,:); %r for dt,     end    DATA.TemplateScores(:,2)= sum(Scores(:,1,:)); %sum(r)    if length(DATA.chspk) > 3 && DATA.cluster.version > 1.11        [p,id] = AllV.GetProbeNumber(DATA, DATA.chspk,4);        DATA.TemplateScores(:,19)= Scores(id,1,:); %r for 4th probe    elseif size(Scores,2) > 11        DATA.TemplateScores(:,19)= Scores(1,12,:);    else        DATA.TemplateScores(:,19)= DATA.TemplateScores(:,2);    end    if ispk == 1 && length(DATA.chspk) > 1        DATA.TemplateScores(:,3)= Scores(2,1,:); %r for 1st probe    else        DATA.TemplateScores(:,3)= Scores(1,1,:); %r for 1st probe    end    if size(Scores,2) > 3        DATA.TemplateScores(:,5)= Scores(ispk,4,:);    end    if ispk > 1 && ispk == size(Scores,1);        DATA.TemplateScores(:,4)= Scores(end-1,1,:);    else        DATA.TemplateScores(:,4)= Scores(end,1,:); %r for last probe    end    DATA.TemplateScores(:,9) = Scores(ispk,3,:); %dvdy for trigger    DATA.TemplateScores(:,10)= sum(Scores(:,2,:));    DATA.TemplateScores(:,12)= sum(Scores(:,3,:)); %sum dvdy    if DATA.trigdt == 4        DATA.TemplateScores(:,11) = DATA.rV;    else        DATA.TemplateScores(:,11)= sum(Scores(:,5,:));    end    DATA.TemplateScores(:,6)= Scores(ispk,5,:);    DATA.TemplateScores(:,7)= Scores(1,5,:);    DATA.TemplateScores(:,13)= sum(Scores(:,7,:)); %absdiff    DATA.TemplateScores(:,14)= sum(Scores(:,6,:)); %mu score    DATA.TemplateScores(:,15)= sum(Scores(:,8,:)); %C2 score    DATA.TemplateScores(:,16)= sum(Scores(:,8,:))-sum(Scores(:,2,:)); %P-1 score        if DATA.cluster.version > 1.14        [p,id] = AllV.GetProbeNumber(DATA, DATA.chspk,length(DATA.chspk));        if id > 0 && id <= size(Scores,1)            DATA.TemplateScores(:,17)= Scores(id,2,:);        else            DATA.TemplateScores(:,17)= sum(Scores(:,9,:)); %P-1 score        end        [p,id] = AllV.GetProbeNumber(DATA, DATA.chspk,1);        DATA.TemplateScores(:,18)= Scores(id,2,:);             elseif size(Scores,2) > 9        DATA.TemplateScores(:,17)= sum(Scores(:,9,:)); %P-1 score        DATA.TemplateScores(:,18)= sum(Scores(:,10,:)); %P+1 score    else        DATA.TemplateScores(:,17)= sum(Scores(:,5,:)); %dprime weighted        DATA.TemplateScores(:,18)= sum(Scores(:,4,:)); %    end    if length(DATA.chspk) == 1        DATA.TemplateScores(:,2) = Scores(1,6,:); %MU r        DATA.TemplateScores(:,3) = Scores(1,3,:); %std1        DATA.TemplateScores(:,4) = Scores(1,4,:); %std1        DATA.TemplateScores(:,11) = Scores(1,7,:); %Trigger        DATA.TemplateScores(:,10)= Scores(1,5,:); %dprime        DATA.TemplateScores(:,12)= Scores(1,8,:); %std1 dvdt        DATA.TemplateScores(:,18)= Scores(1,9,:); %std1 dvdt        DATA.TemplateScores(:,19)= Scores(1,9,:); %std1 dvdt    end    DATA = NormalizeTemplates(DATA);    Template.cluster = DATA.currentcluster;    if DATA.interactive >= 0 || keepscores         AllTemplates = AllV.mygetappdata(DATA,'AllTemplates');         AllTemplates(DATA.currentcluster).Scores = DATA.TemplateScores;         AllTemplates(DATA.currentcluster).calctime = now;         AllTemplates(DATA.currentcluster).probe = DATA.probe(1);         AllTemplates(DATA.currentcluster).expt = DATA.exptno;         AllTemplates(DATA.currentcluster).usestdtemplates = DATA.usestdtemplates;         AllTemplates(DATA.currentcluster).Template = Template;         DATA = AllV.mysetappdata(DATA, 'AllTemplates', AllTemplates);     end%    DATA.tmpdips = AllV.CalculateTemplateDips(DATA);    function DATA = NormalizeTemplates(DATA, varargin)    if DATA.tmpnorm        stds = std(DATA.TemplateScores);        for j = 1:size(DATA.TemplateScores,2)            DATA.TemplateScores(:,j) = DATA.TemplateScores(:,j)./stds(j);            DATA.TemplateScaling(j) = stds(j);        end    end