function [DATA, Template] = CalcTemplateScores(DATA,  varargin)j = 1;skip = zeros(1,length(varargin));while j <= length(varargin)    if isfield(varargin{j},'ms')        MeanSpike = varargin{j};        skip = [skip j];    elseif isfield(varargin{j},'TemplateUsed')        skip = [skip j];        MeanSpike = varargin{j};    elseif isfield(varargin{j},'Template') && isfield(varargin{j},'Dprime')        skip = [skip j];        Template = varargin{j};    end    j = j+1;endvarargin = varargin(skip ==0);    if exist('Template','var')            MeanSpike.ms = Template.Template;            MeanSpike.mu = Template.mumean;            if size(Template.Dprime,1) == size(MeanSpike.ms,1)                MeanSpike.vdprime = Template.Dprime;            elseif size(Template.Dprime,1) == max(DATA.cluster.chspk)                MeanSpike.vdprime(1:max(DATA.cluster.chspk),:) = Template.Dprime;            else                MeanSpike.vdprime(DATA.cluster.chspk,:) = Template.Dprime;            end            if isfield(Template,'otherTemplates');                MeanSpike.othermeans = Template.otherTemplates;            end    elseif exist('MeanSpike','var')        if isfield(MeanSpike,'Template') && isfield(MeanSpike,'Dprime')%a strcu returned byt CalcTemplateScores before                        T = MeanSpike;        end    elseif  isfield(DATA.cluster,'TemplateUsed')        MeanSpike.ms = DATA.cluster.TemplateUsed;        if ~isfield(DATA.cluster,'mumeanUsed')            MeanSpike.mu = DATA.cluster.MeanSpike.mu;        elseif size(DATA.cluster.mumeanUsed,1) == length(DATA.cluster.chspk)            MeanSpike.mu(DATA.cluster.chspk,:) = DATA.cluster.mumeanUsed;        else            MeanSpike.mu = DATA.cluster.mumeanUsed;        end        MeanSpike.vdprime(DATA.cluster.chspk,:) = DATA.cluster.DprimeUsed;    elseif ~isfield(DATA.cluster,'MeanSpike')        [MeanSpike, details] = AllV.PlotMeanSpike(DATA,'noplot');        if isempty(DATA.clst)            DATA.clst(details.id) = 2;            DATA.clst(details.nid) = 1;        end    else        MeanSpike = DATA.cluster.MeanSpike;    end    [DATA, Template] = AllV.CalcTemplatesFromMean(DATA, MeanSpike, varargin{:});