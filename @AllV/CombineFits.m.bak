function [fit, details] = CombineFits(DATA, fits,varargin)
%AllV.CombineFits(DATA, fits)  match clusters across
%fits, and decide on best final grouping
plottype = 'none';
slimfits = 0;
slimfit = 0;
consensus = 0;
j = 1;
while j <= length(varargin)
    if strcmpi(varargin{j},'all')
        doall = 1;
    elseif strcmpi(varargin{j},'expandall')
        doall = 2;
    elseif strcmpi(varargin{j},'consensus')
        consensus = 1;
    elseif strcmpi(varargin{j},'image')
        plottype = 'image';
    elseif strcmpi(varargin{j},'slim')
        slimfits = 1;
        if length(varargin) > j && isnumeric(varargin{j+1})
            j = j+1;
            slimfit = varargin{j};
        end
    end
    j = j+1;
end


if doall == 2
    nf = 0;
    for j = 1:length(fits)
        nf = nf+1;
        sfits{nf} = fits{j};
        details.fiti(nf,:) = [j 0];
        if isfield(fits{j},'alternates')
            for k = 1:length(fits{j}.alternates)
                nf = nf+1;
                sfits{nf} = AllV.SetFit(fits{j},fits{j}.alternates{k}.type);
                details.fiti(nf,:) = [j k];
            end
        end
    end
    fit = sfits;
    return;
elseif doall == 1
    for j = 1:length(fits)
        sfits{j} = SlimFit(DATA, fits, j);
        nc(j,1) = sum(sfits{j}.SU > 0); 
        nc(j,2) = length(sfits{j}.SU);
    end
    details.nc = nc;
    DATA.autofits = sfits;
    [~,b] =  max(nc(:,1));
    sfits{b} = ConsensusFit(DATA, sfits{b},sfits,'ncrit',1);
    fit = sfits;
    return;
    
end    
%Under devel
% also try finding clusters common to everyone, then attaching the 
% ones left out.
if slimfits
    if slimfit > 0 || ~iscell(fits)
        fit = SlimFit(DATA,fits, slimfit);
        return;
    end
    for j = 1:length(fits)
        fit{j} = SlimFit(DATA, fits,j);
        sfits{j} = AllV.SetFit(fit{j},'slim');
        nc(j,1) = sum(sfits{j}.SU > 0); 
        nc(j,2) = length(sfits{j}.SU);
    end
    details.nc = nc;
    [~,b] =  max(nc(:,1));
    a = ConsensusFit(DATA, sfits{b},sfits,'ncrit',1);
    a.combinedfrom = b;
    fit = a;
    return;
end



for j = 1:length(fits)
    if isfield(fits{j},'combinedetails') %already combined
        nc(j) = 0;
    elseif isfield(fits{j},'SU')
        nc(j) = length(fits{j}.SU);
    else
        nc(j) = 1;
    end
end


[a,b] = max(nc);
minclusters = max([min(nc) 2]);
allgood = find(nc ==a);
checkfits = [];
if length(allgood) > 1
    fitscores = CellToMat(fits,'fitscore');
    if ~isempty(fitscores)
        [a,b] = max(fitscores(allgood,1));
        b = allgood(b);
    end

    for j = 1:length(allgood)
        for k = 1:j-1
            [matches, mdetails] = clust.MatchLsts(fits{allgood(j)}.clst,fits{allgood(k)}.clst);
            no = find(sum(mdetails.score > 0.8,2) >2);
            gmatch(j,k) = min(matches);
            if ~isempty(no)
                fprintf('Fits %d and %d have %d clusters, but different\n',allgood(j),allgood(k),a);
                checkfits(end+1,:) = [j k];
            end
        end
    end
end
maxpt = b;
details.maxfit = b;
fprintf('Max #Clusters in fit %d\n',b);
if consensus
    fit = ConsensusFit(DATA, fits{b},fits);
    return;
end


fit = fits{b};
pcspace = [];
tmpspace = [];
for j = 1:length(fit.SU)
        if fit.space{j}(1)  == 1
            pcspace = cat(2,pcspace,fit.space{j}(2:end));
        elseif fit.space{j}(1)  == 3
            tmpspace = cat(2,tmpspace,fit.space{j}(2:end));
        end
end

fisspace = GetFitSpace(DATA, fit);

clst = fit.clst;
finished = 0;
subs = [];
while finished == 0
    cls = unique(clst);
    for j = 1:length(cls);
        x = CalcIsolation(fitspace(:,fit.space{j,j}(2:end)),clst,cls(j));
        D(j,j) = x(1);
        nD(j,j) = x(3);
        for k =1:j-1;
            twospace = unique(cat(2,fit.space{j,j}(2:end),fit.space{j,k}(2:end),fit.space{k,k}(2:end)));
            x = CalcIsolation(fitspace(:,twospace),clst,cls(j), cls(k));
            D(j,k) = x(1);
            D(k,j) = x(2);
            nD(j,k) = x(3);
            nD(k,j) = x(4);
            if mean(x(1:2)) < 2.5 && mean(x(3:4)) < 2 
                cscore(j,k) = mean(x);
            end
%any time collapsing two produces one cluster that is
%better isolated by the "near" measure, this must be
% good - unless its a double trigger. Add CalcEfficacy to check
            cclst = ones(size(clst));
            cclst(clst == cls(j)) = 2;
            cclst(clst == cls(k)) = 2;
            cx = CalcIsolation(fitspace,cclst,2);
            if cx(3) > nD(j,j) && cx(3) > nD(k,k)
                cscore(j,k) = 5;                
            end
        end
    end
    D = fit.D(cls,cls);
    nd = size(D,1);
    xid = sub2ind(size(D),2:nd,2:nd);
    D(xid) = NaN;
    spaces = fit.space(cls,cls);
    [a,b] = min(D(2:end,2:end));
    [c,d] = min(nD(2:end,2:end));
    if size(D,1) <= minclusters || min(a) > 2
        finished = 1;
    else
        [~,c] = min(a);
        idx = [b(c)+1 c+1];
        fprintf('Combining %d into %d\n',cls(idx));
        clst(clst==cls(idx(1))) = cls(idx(2));
        subs(end+1,:) = idx(1:2);
        cscore(j,k) = 0;
        cscore(k,j) = 0;
        clear D;
        clear nD;
    end
end
details.subs = subs;
if ~isempty(subs) %were substitutiions
    newcls = unique(clst); %new list
    newid = find(ismember(cls,newcls));
    fit.isolation = fit.isolation(newid,:);
    fit.NDisolation = fit.NDisolation(newid,:);
    fit.bestscores = fit.bestscores(newid);
    fit.SU = fit.SU(newid);
    fit.space = spaces;
else
    fprintf('No clusters were combined\n');
end
id = find(D < 2.5);
nid = find(nD < 2.5);

separate = [];
for j = 1:length(fits)
    [matches, mdetails] = clust.MatchLsts(clst,fits{j}.clst);
    no = sum(mdetails.score > 0.8,2);
    id = find(no >1);
    for k = 1:length(id)
        matchid = find(mdetails.score(id(k),:) > 0.8);
        fprintf('Checking Fit %d cells %s against cell%d....',j,sprintf(' %d',matchid),cls(id(k)));
        d = [fits{j}.D(matchid(1),matchid(2)) fits{j}.D(matchid(2),matchid(1))];
        if min(d) > 2.5
            fprintf('Fit %d cl %d and %d separation %.2f,%.2f',j,matchid(1),matchid(2),d);
            separate(end+1,:) = [j matchid(1) matchid(2)];
        end
        fprintf('\n');
    end
    details.matchscore{j} = mdetails.score;
   if strcmp(plottype,'image')
       GetFigure('FitMatches');
       imagesc(mdetails.score);
       title(sprintf('Fit %d: %d clusters',j,nc(j)));
    end
end
cls = unique(clst);
id = find(diff(cls) > 1);
if ~isempty(id)
    j = id(1)+1;
    if sum(cls == j) == 0 %missing
        while j < max(cls)
            clst(clst == j+1) = j;
            j = j+1;
        end
    end
end
if strcmp(plottype,'image')
    j = DATA.cluster.bestfit(1);
    [matches, mdetails] = clust.MatchLsts(clst,fits{j}.clst);
    no = sum(mdetails.score > 0.8); %check if best fit tells us to combine split cells her
    id = find(no > 1);
    for j = 1:length(id)
        splits = find(mdetails.score(:,id(j)) > 0.8);
        for k = 1:length(splits)
            for c = 1:k-1
                d = [D(splits(k),splits(c)) D(splits(c),splits(k))];
                neard = [nD(splits(k),splits(c)) nD(splits(c),splits(k))];
                if min(d) < 2 || min(neard) < 1 %collapse these back
                    fprintf('Should coalesce %d and %d\n',splits(k),splits(c));
                end
            end
        end
    end
    GetFigure('FitMatches');
    imagesc(mdetails.score);
    title(sprintf('Fit %d: %d clusters',j,nc(j)));
end

details.separate = separate;
fit.clst = clst;
fit.D = D;
fit.nearD = nD;
fit.subs = details.subs;
fit.combinedetails = details;



function sfit =  SlimFit(DATA, fits, fiti, varargin)

verbose = 1;
if iscell(fits)
    fit = fits{fiti};
else
    fit = fits;
    if isfield(fit,'fitnumber')
        fiti = fit.fitnumber;
    end
end
sfit = fit;
if ~isfield(fit,'SU')
    sfit.SU = [];
end
if length(fit.D) < 3
    return;
end

pcspace = [];
tmpspace = [];
if fit.fitspace(1) == 1
    fitspace = DATA.pcs;
else
    fitspace = DATA.TemplateScores;
end

finished = 0;
substitutions = [];
clst = fit.clst;
newisolation = fit.isolation;
while finished == 0
    cmpisolation = [];
    joins = [];
    cls = unique(clst);
    a = [];
    cmpscore = ones([length(cls) length(cls) 2]) .*NaN;
    for j = 1:length(cls)
        for k = 1:j-1;
            sp = unique(cat(2,fit.space{j,j}(2:end),fit.space{k,k}(2:end)));
            fitspaces{j,k} = sp;
%Calculate isolation for the combined cluster, and for the
%individuals in the same space
            isolation = CalcIsolation(fitspace(:,sp),clst,cls([j k]));
            isolationj = CalcIsolation(fitspace(:,sp),clst,cls(j));
            isolationk = CalcIsolation(fitspace(:,sp),clst,cls(k));
            isolations(j,k,:) = isolation;
            cmpi = cat(2,isolationj([1 3]),isolationk([1 3]),isolation([1 3]));
            cmpisolation(j,k,:) = cmpi;
            a(j,k,1) =  cmpi(:,5) > cmpi(:,1) ;
            a(j,k,2) = cmpi(:,5) > cmpi(:,3);
            a(j,k,3) =  cmpi(:,6) > cmpi(:,2);
            a(j,k,4) = cmpi(:,6) > cmpi(:,4);
            cmpscore(j,k,1) = cmpi(5) - mean(cmpi([1 3]));
            cmpscore(j,k,2) = cmpi(6) - mean(cmpi([2 4]));
        end
    end
    [bi,ai] = find(squeeze(sum(a,3)) > 2,1);
    if isempty(bi) || j < 3
        if finished == 0
            subs{1} = substitutions;
            finished = 1;
        end
        x = sum(cmpscore(2:end,2:end,:),3);
        [bi,ai] = find(x > -0.2);
        bi = bi+1;
        ai = ai+1;
    else
%if find more than one, just fixed the biggest gain first.        
        if length(bi) > 1
            x = sum(cmpscore,3);
            id = sub2ind(size(x),bi,ai);
            [~,maxi] = max(x(id));
            bi = bi(maxi);
            ai = ai(maxi);
        end
        cmpi = squeeze(cmpisolation(bi,ai,:));
        isolation = squeeze(isolations(bi,ai,:));
        sp = fitspaces{bi,ai};
        d = squeeze(a(bi,ai,:));
        substitutions(end+1,:) = cls([bi ai]);
        cleared(cls(bi)) = cls(ai);
        clearscore(cls(bi),:) = squeeze(cmpisolation(bi,ai,:));
        if verbose
            fprintf('Fit %d Setting %d->%d D%.2f,%.2f->%.2f  nD %.2f,%.2f->%.2f\n',fiti,cls(bi),cls(ai),cmpi([1 2 5 3 4 6]));
        end
        clsa = unique(clst);
        clst(clst ==cls(bi)) = cls(ai);
        clsb = unique(clst);
        sid = find(ismember(clsa,clsb));
        newisolation = newisolation(sid,:);
        sid = find(clsb == cls(ai));
        newisolation(sid,:) = isolation(1:size(newisolation,2));
        clsid = find(ismember(cls,unique(clst)));
        cls = unique(clst);
        sfit.cleared = cleared;
    end
end
if ~isempty(substitutions)
    nalt = GetAltFit(sfit, 'slim');
    sfit.alternates{nalt}.substitutions = substitutions;
    sfit.alternates{nalt}.type = 'slim';
    sfit.alternates{nalt}.isolation = newisolation;
    sfit.alternates{nalt}.score = AllV.CalcFitScore(AllV.SetFit(fit,'slim'));
end
nalt = GetAltFit(sfit, 'slim2');

if ~isempty(bi)
    replaced = [];
    sfit.alternates{nalt}.substitutions = cat(1,substitutions,cls([bi ai]));
    for j = 1:length(bi)
        cmpi = squeeze(cmpisolation(bi(j),ai(j),:));
        isolation = squeeze(isolations(bi(j),ai(j),:));
        clsa = unique(clst);
        if ~ismember(cls(ai(j)),clsa) %don't use a cell that is gone already
            if length(replaced) >= cls(ai(j)) && ismember(replaced(cls(ai(j))),clsa)
                ai(j) = find(cls == replaced(cls(ai(j))));
            end
        end
        if ismember(cls(ai(j)),clsa) %don't use a cell that is gone already
            clst(clst ==cls(bi(j))) = cls(ai(j));
            replaced(cls(bi(j))) = cls(ai(j));
            clsb = unique(clst);
            sid = find(ismember(clsa,clsb));
            newisolation = newisolation(sid,:);
            sid = find(clsb == cls(ai(j)));
            newisolation(sid,:) = isolation;
        else %should not get here
            x = find(sfit.alternates{nalt}.substitutions(:,1) == cls(bi(j)) & sfit.alternates{2}.substitutions(:,2) == cls(ai(j)));
            sfit.alternates{nalt}.err = sprintf('Cant replace %d with %d',cls(ai(j)),cls(bi(j)));
            cprintf('red', '%s\n',sfit.alternates{2}.err);
        end
    end
    sfit.alternates{nalt}.type = 'slim2';
    sfit.alternates{nalt}.isolation = newisolation;
    sfit.alternates{nalt}.score = AllV.CalcFitScore(AllV.SetFit(fit,'slim2'));
end

function newfit = ConsensusFit(DATA, fit, fits, varargin)

ncrit = 1;

j = 1;
while j <= length(varargin)
    if strcmp(varargin{j},'ncrit')
        j = j+1;
        ncrit = varargin{j};
    end
    j = j+1;
end

for j = 1:length(fits)
    [matches, details] = clust.MatchLsts(fit.clst,fits{j}.clst);
    [a,b] = find(details.score > 0.8);
    clst = zeros(1,length(fit.clst));
    for k = 1:length(a)
        clst(details.matchid{a(k),b(k)}) = a(k);
    end
    clsts(j,:) = clst;
end
newfit = fit;
nc = max(fit.clst)+1;
nalt = GetAltFit(newfit, 'consensus');
clst = fit.clst;
clst(sum(clsts ==0) > ncrit) = nc;
if sum(clst ==nc) %did change somethi
    newfit.alternates{nalt}.clst = clst;
    newfit.alternates{nalt}.type =  'consensus';
    cls = unique(clst);
    fitspace = GetFitSpace(DATA, fit,'exact');
    for j = 1:length(cls)
        isolation(j,:) = CalcIsolation(fitspace,clst,cls(j)-1);
    end
    newfit.alternates{nalt}.isolation = isolation;
    newfit.alternates{nalt}.nocluster = nc;
end

function nalt = GetAltFit(fit, type, varargin)

if isfield(fit,'alternates')
    nalt = 0;
    for j = 1:length(fit.alternates)
        if strcmp(fit.alternates{j}.type,type)
            nalt = j;
        end
    end
    if nalt == 0
        nalt = j+1;
    end
else
    nalt = 1;
end


function fitspace = GetFitSpace(DATA, fit, varargin)
%return space where fit was done, 
%GetFitSpace(DATA, fit, 'exact') gives only dims used

exact = 0;

j = 1; 
while j <= length(varargin)
    if strncmpi(varargin{j},'exact',5)
        exact = 1;
    end
    j = j+1;
end

if fit.fitspace(1) == 1
    fitspace = DATA.pcs;
else
    fitspace = DATA.TemplateScores;
end

if exact
    fitspace = fitspace(:,fit.fitspace(2:end));
end
