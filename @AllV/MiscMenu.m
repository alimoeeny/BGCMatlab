function MiscMenu(a, b, type, varargin)    DATA = GetDataFromFig(a);    DATA = SaveCallback(DATA,a);    onoff = {'off' 'on'};    DataClusters = AllV.mygetappdata(DATA,'Clusters');            if sum(strcmp(type,{'savelayout' 'savedefaultlayout' 'savelastlayout'}))        Figpos = GetFigPos(DATA.toplevel);        if strcmp(type,'savelastlayout')            layoutfile = strrep(DATA.defaultlayout,'.layout','last.layout');            save(CheckNameBug(layoutfile),'Figpos');            return;        elseif isempty(DATA.layoutfile) || strcmp(type,'savedefaultlayout')             layoutfile = DATA.defaultlayout;        else            layoutfile = DATA.layoutfile;        end        [outname, pathname] = uiputfile(layoutfile);        if outname            gui = DATA.gui;            DATA.layoutfile = [pathname outname];            save(DATA.layoutfile,'Figpos','gui');            fprintf('Layout saved to %s\n',DATA.layoutfile);        end    elseif strcmp(type,'listclusterbackup')                b = clust.ListBackups(DATA.cluster);        AddRevertMenu(a, b, DATA);        DATA.guistate.listbackups = 1;        SetData(DATA);            elseif strcmp(type, 'ClusterXY')        AllV.PlotOneXY(DATA,DATA.xyplot.xy);            elseif strcmp(type,'preferences')%        DATA = AllV.mysetappdata(DATA,'gui',DATA.gui);%        AppDataPopup(DATA, 'gui');        AllV.PreferencesPopup(DATA);    elseif strcmp(type,'loadlayout')        [afile, pathname] = uigetfile(DATA.layoutfile);        if ischar(afile)            DATA.layoutfile = [pathname afile];            AllV.ApplyLayout(DATA);        end    elseif sum(strcmp(type,{'nextauto' 'prevauto' 'setauto'}))        if strcmp(type,'prevauto')            inc = -1;        else            inc = 1;        end        fprintf('AllV.MiscMenu(DATA,[],''setauto'',#)  to set manually\n');        DATA = AllV.SetData(DATA, 'autofits');        if cellstrcmp('rebuild',varargin)            fprintf('Combining Fits\n');            DATA.cluster.autofits = AllV.CombineFits(DATA, DATA.cluster.autofits,'all');        end        [fits, allf] = AllV.CombineFits(DATA, DATA.cluster.autofits,'expandall');        rank = 1;        [a,b] = AllV.ChooseBestFit(fits,'silent');        [c,d] = sort(b.scores,'descend');        [c,d] = sort(b.ascores{1},'descend');        groupd = d;        for j = 1:length(allf.groups)            groupd(ismember(d,allf.groups(j).group)) = j;        end        truedrank = d;        for j = 2:length(d)            id = find(~ismember(groupd(j:end),groupd(1:j-1)));            if ~isempty(id)                g = d(id(1)+j-1); %fist fit in a new group.                d(id(1)+j-1) = d(j); %swap with current member for now                d(j) = g;                g = groupd(id(1)+j-1); %fist fit in a new group.                groupd(id(1)+j-1) = groupd(j); %swap with current member for now                groupd(j) = g;            end        end                if isfield(DATA.cluster,'autofiti')            if length(DATA.cluster.autofiti) > 2                DATA.cluster.autofiti(3) = DATA.cluster.autofiti(3) +inc;            else                DATA.cluster.autofiti(3) = 1;            end            if DATA.cluster.autofiti(3) > length(fits)                DATA.cluster.autofiti(3) = 1;            elseif DATA.cluster.autofiti(3) < 1                DATA.cluster.autofiti(3) = length(fits);            end            fiti = floor(DATA.cluster.autofiti(3));                           if 0                if length(DATA.cluster.autofiti) > 2                    fiti = DATA.cluster.autofiti(3);                else                    fiti = 1;                end                if isfield(DATA.cluster.autofits{fiti},'alternates')                    na = length(DATA.cluster.autofits{fiti}.alternates);                else                    na = 0;                    DATA.cluster.autofiti(2) = 0;                end                if inc == 1 && na >0                    if DATA.cluster.autofiti(2) < na %still have more alternates to see                        DATA.cluster.autofiti(2) = DATA.cluster.autofiti(2)+1;                    else                        DATA.cluster.autofiti(2) = 0;                    end                end                if DATA.cluster.autofiti(2) == 0                    DATA.cluster.autofiti(1) = DATA.cluster.autofiti(1)+inc;                    if DATA.cluster.autofiti(1) > length(DATA.cluster.autofits)                        DATA.cluster.autofiti(1) = 1;                    elseif DATA.cluster.autofiti(1) < 1                        DATA.cluster.autofiti(1) = length(DATA.cluster.autofits)                    end                end            end %end if 0        else            DATA.cluster.autofiti = [1 0];        end        if strcmp(type,'setauto')            if length(varargin{1}) == 2                DATA.cluster.autofiti = varargin{1};                fiti = find(allf.fiti(:,1) == DATA.cluster.autofiti(1) & allf.fiti(:,2) == DATA.cluster.autofiti(2));             else                fiti = 0;                DATA.cluster.autofiti(1) = find(d == floor(varargin{1}));            end        end        DATA.cluster.autofiti(1) = floor(DATA.cluster.autofiti(1));            c = b.fitorder;                args = {'showquality'};        if fiti == 0            rank = find(truedrank == d(DATA.cluster.autofiti(1)));            fiti = d(DATA.cluster.autofiti(1));        end        group = groupd(DATA.cluster.autofiti(3));        groupfits = allf.groups(group).group;        truefiti = allf.fiti(fiti,1);        fit = fits{fiti};        if isfield(fit,'alternatetype')            fprintf('Showing Spikes for fit %.1f(%d) %s(rank %d/%d Group %d), Score %.1f',fit.fitnumber,fiti,...                fit.alternatetype,rank,length(fits),group,b.scores(fiti));            altlabel = fit.alternatetype;        else            fprintf('Showing Spikes for fit %.1f(%d) (rank %d/%d Group %d), Score %.1f',fit.fitnumber,fiti,...                rank,length(fits),group,b.scores(fiti));            altlabel = 'base';        end        for j = 1:length(b.ascores)            fprintf(', %.1f',b.ascores{j}(fiti));        end        fprintf(' Space %s\n', sprintf(' %d',fit.fitspace));        if length(groupfits) > 1            fprintf('Other Fits in Group: %s\n',sprintf(' %d',groupfits));        end        [DATA, DATA.cluster, fit] = AllV.SetClusterFromFit(DATA, DATA.cluster,fit.fitnumber,'showquality');        if length(fit.SU) <  length(DATA.cluster.autofits{allf.fiti(fiti,1)}.SU) || isfield(fit,'alternatetype')%Cant write any changes back into autofits i            %            fprintf('Errror Setting Autofits\n');        else%why do we want to write these back into autofits?            DATA.cluster.autofits{truefiti} = fit;        end        AllV.ReplotPCs(DATA,[],'string',sprintf(' Fit %.1f',fit.fitnumber));        AllV.QuickSpks(DATA,DATA.plot.nquickspks);        AllV.PlotTriggerHist(DATA,DATA.cluster,'showall');        SetData(DATA);    elseif sum(strcmp(type,{'savelastconfig'}))        DATA.PopupWindowData = getappdata(DATA.toplevel,'PopupWindowData');        outname = strrep(DATA.defaultconfig,'.config','last.config');        savefields = {'quickcutmode' 'probeswitchmode' 'auto' 'ptsz' 'plot' 'plotspk' 'gui' 'fullvswitchmode' 'quicksave' 'PopupWindowData' 'options'};        DATA.plotspk.probes = [];%some things must be set manually each time                DATA = AllV.SetDefaults(DATA, 'safeauto');        SaveConfig(DATA, outname,savefields,'verbose');    elseif sum(strcmp(type,{'saveconfig' 'savedefaultconfig' 'savelastconfig'}))        DATA.PopupWindowData = getappdata(DATA.toplevel,'PopupWindowData');        if strcmp(type,'savedefaultconfig') || ~isfield(DATA,'configfile') || isempty(DATA.configfile)            DATA.configfile = DATA.defaultconfig;        end        [outname, pathname] = uiputfile(DATA.configfile);        if outname            DATA.configfile = [pathname outname];            savefields = {'quickcutmode' 'probeswitchmode' 'auto' 'ptsz' 'plot' 'plotspk' 'gui' 'fullvswitchmode' 'quicksave' 'PopupWindowData' 'options'};            DATA.plotspk.probes = [];            SaveConfig(DATA, DATA.configfile,savefields,'verbose');        end    elseif strcmp(type,'scaledensity')        DATA.plot.scaledensity = ~DATA.plot.scaledensity;        set(a,'checked',onoff{1+DATA.plot.scaledensity});        AllV.ReplotPCs(DATA,[]);        set(DATA.toplevel,'UserData',DATA);    elseif strcmp(type,'loadconfig')        [afile, pathname] = uigetfile(DATA.configfile);        if ischar(afile)        DATA.configfile = [pathname afile];        DATA = AllV.ReadConfig(DATA, DATA.configfile);        end    elseif strcmp(type,'revertmanual')        name = AllV.ClusterFile(DATA.name, DATA);        load(name);        setappdata(DATA.toplevel,'ManualClusters',Clusters);        DATA.cluster = FixCluster(Clusters{DATA.probe(1)});        DATA.currentcluster = 1;        DATA = CopyFields(DATA,DATA.cluster,{'usestdtemplates'});        DATA = AllV.SetTemplateData(DATA,DATA.currentcluster,'force');        AllV.ClassifyAll(DATA,1,'quick','recluster','replot');    elseif strcmp(type,'revertcluster')        if length(DataClusters) >= DATA.probe(1) && ~isempty(DataClusters{DATA.probe(1)})            DATA.cluster = DataClusters{DATA.probe(1)};            if isfield(DATA.cluster,'Evec')                DATA.Evec = DATA.cluster.Evec;            end            if isfield(DATA.cluster,'pcgms')                DATA.dipvals = DATA.cluster.pcgms;            end            DATA = AllV.SetPCs(DATA, 0, 0);%            DATA = AllV.CheckTemplates(DATA,DATA.cluster);            AllV.ClassifyAll(DATA,1,'quick','recluster','replot');        end    elseif strcmp(type,'tofront')            FiguresToFront(DATA.tag);    elseif strcmp(type,'plotcelllist')        AllV.PlotCellList(DATA, 'showfig','reload');    endfigure(DATA.toplevel);    function AddRevertMenu(src, names, DATA)hm = get(src,'parent');it = findobj(hm,'label','Revert to');if isempty(it)    it = uimenu(hm,'label','Revert to');else    delete(allchild(it));endfor j = 1:length(names)   uimenu(it,'Label',sprintf('P%d %s',names(j).probe,datestr(names(j).date)),'callback',{@RevertCluster, names(j).name});endif isempty(names)    delete(it);end    function RevertCluster(src, b, name)DATA = GetDataFromFig(src);if exist(name, 'file')    X = load(name);    DATA.cluster = X.Clusters{DATA.probe(1)};    fprintf('Reverting to Cluster saved by %s with %s on %s %d/%d in %s \n',DATA.cluster.user,DATA.cluster.clusterprog,datestr(DATA.cluster.savetime(1)),length(DATA.cluster.times),DATA.cluster.nspks,name);    AllV.ClassifyAll(DATA,1,'quick','recluster','replot');endfunction DATA = ApplyCluster(DATA)    if DATA.cluster.space(1) == 6        [DATA.ndxy, DATA.gmcid] = AllV.ProjectND(DATA, DATA.cluster.space(2), DATA.cluster.gmfit);        DATA.cluster.bestcl = DATA.gmcid;    end    DATA.watchplots = 1;  %must be in gui    [cl, cluster] = AllV.ClassifySpikes(DATA,DATA.cluster);    DATA.cluster.MeanSpike = cl.MeanSpike;    DATA.clid = cl.id;    DATA.clst = cl.clst;    DATA.cluster.ctime = cluster.ctime;    AllV.PlotHistogram(DATA,[]);    if nargout == 0        SetData(DATA);    end    