function DATA = AddErr(DATA,varargin)showerr = 0;exclude = [];style = 'errors';errortype = 'error';if iscell(varargin{1}) %append errors    DATA.errs = {DATA.errs{:} varargin{1}{:}};    if length(varargin) > 1 &&  iscell(varargin{2});        e = varargin{2};        o = length(DATA.errs) - length(e);        for j = 1:length(e)            DATA.errdata(o+j)  = varargin{2}(j);        end    end    return;elseif isfield(varargin{1},'errs') %add errs from another struct    DATA.errs = {DATA.errs{:} varargin{1}.errs{:}};    if isfield(varargin{1},'errdata')        DATA.errdata = [DATA.errdata varargin{1}.errdata];    end    return;elseif isobject(varargin{1})    ERR = varargin{1};    varargin = varargin(2:end);else    ERR = [];endfor j = 1:length(varargin)    if strcmp(varargin{j},'-color')        exclude = [exclude j j+1];        j = j+1;        style = varargin{j};    elseif strcmp(varargin{j},'-warn')        errortype = 'warning';    elseif strcmp(varargin{j},'-show')        showerr = 1;        exclude = [exclude j];    elseif strcmp(varargin{j},'-warning') %not serious, but log        ERR.warningonly = 1;    end    j = j+1;endid = setdiff(1:length(varargin),exclude);s = sprintf(varargin{id});mycprintf(style,'%s\n',s);if showerr && DATA.interactive >= 0    warndlg(s,'AllVPcs Error');endif isfield(DATA,'errs')    DATA.nerr = length(DATA.errs)+1;else    DATA.nerr = 1;endDATA.errs{DATA.nerr} = s;DATA.errdata(DATA.nerr).time = now;DATA.errdata(DATA.nerr).errobj = ERR;DATA.errdata(DATA.nerr).probe = DATA.probe(1);DATA.errdata(DATA.nerr).eid = DATA.exptno;DATA.errdata(DATA.nerr).errortype  = errortype;if isfield(DATA,'progname')    DATA.errdata(DATA.nerr).program = DATA.progname;else    DATA.errdata(DATA.nerr).program = 'NotSet';endDATA.errtime(DATA.nerr) = now;DATA.errobj{DATA.nerr} = ERR;