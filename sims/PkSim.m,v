head	1.1;
access;
symbols;
locks
	bgc:1.1; strict;
comment	@// @;


1.1
date	2010.01.22.15.10.34;	author bgc;	state Exp;
branches;
next	;


desc
@Simulations of Pkernels and prediction.
This version uses on image for each trial
@


1.1
log
@Initial revision
@
text
@function pred = PkSim(varargin)

npermute = 10;
bias = 0.5;
npix = 10;
ntrials = 50;
j = 1;
while j <= length(varargin)
    if strncmpi(varargin{j},'bias',4)
        j = j+1;
        bias = varargin{j};
    elseif strncmpi(varargin{j},'npermute',4)
        j = j+1;
        npermute = varargin{j};
    elseif strncmpi(varargin{j},'ntrials',4)
        j = j+1;
        ntrials = varargin{j};
    end
    j = j+1;
end
psum = zeros(npix,npix);
nsum = psum;

tk = rand(npix, npix);
tk = tk - mean(tk(:));
for j = 1:ntrials
ims{j} = rand(npix, npix)-0.5;
tresp(j) = sum(ims{j}(:) .* tk(:));
end

%make choices using a real kernel
choices = tresp > prctile(tresp,100*bias);
%choices = rand(1,ntrials) > bias;
pn = sum(choices);
nn= sum(~choices);

for j = 1:ntrials
    Expt.Trials(j).Seedseq = j;
if choices(j)
    psum = psum + ims{j};
else
    nsum = nsum+ims{j};
end
end
pid = find(choices);
nid = find(~choices);
[kp, a] = CalcPKernel(Expt, pid, nid, ims, ims);
a = PredictChoice(kp, ims, 1:ntrials, (choices*2)-1, a);
kp = fftshift(kp);
kl = psum./pn-nsum./nn;


for j = 1:ntrials
    scores(j) = sum(ims{j}(:) .* kl(:));
    ascores(j) = sum(ims{j}(:) .* kp(:));
    if choices(j)
        pi = psum-ims{j};
        ni = nsum;
        ipn = pn - 1;
        inn = nn;
    else
        ni = nsum-ims{j};
        pi = psum;
        inn = nn - 1;
        ipn = pn;
    end
    ik = (pi./ipn)-(ni./inn);
    iscores(j) = sum(ims{j}(:) .* ik(:));
end

obias = nn/(pn+nn);
crit = prctile(scores,100 * obias);
icrit = prctile(iscores,100 * obias);
pc = scores >= crit;

pred(1) = sum(pc == choices)./(nn+pn);
pred(2) = obias * obias + (1-obias) * (1-obias);
pc = iscores >= icrit;
pred(3) = sum(pc == choices)./(nn+pn);


id = randperm(ntrials);
ichoices = choices(id);
psum = zeros(npix,npix);
nsum = psum;

for j = 1:ntrials
if ichoices(j)
    psum = psum + ims{j};
else
    nsum = nsum+ims{j};
end
end

ipid = find(ichoices);
inid = find(~ichoices);
[kp, b] = CalcPKernel(Expt, ipid, inid, ims, ims);
b = PredictChoice(kp, ims, 1:ntrials, (ichoices*2)-1, b);
for j = 1:ntrials
    if ichoices(j)
        pi = psum-ims{j};
        ni = nsum;
        ipn = pn - 1;
        inn = nn;
    else
        ni = nsum-ims{j};
        pi = psum;
        inn = nn - 1;
        ipn = pn;
    end
    ik = pi./ipn-ni./inn;
    iscores(j) = sum(ims{j}(:) .* ik(:));
end
icrit = prctile(iscores,100 * obias);
pc = iscores >= icrit;
pred(4) = sum(pc == choices)./(nn+pn);


for k = 1:npermute
id = randperm(ntrials);
ichoices = choices(id);
psum = zeros(npix,npix);
nsum = psum;

for j = 1:ntrials
if ichoices(j)
    psum = psum + ims{j};
else
    nsum = nsum+ims{j};
end
end

ipid = find(ichoices);
inid = find(~ichoices);
[kp, b] = CalcPKernel(Expt, ipid, inid, ims, ims);
b = PredictChoice(kp, ims, 1:ntrials, (ichoices*2)-1, b);

for j = 1:ntrials
    if ichoices(j)
        pi = psum-ims{j};
        ni = nsum;
        ipn = pn - 1;
        inn = nn;
    else
        ni = nsum-ims{j};
        pi = psum;
        inn = nn - 1;
        ipn = pn;
    end
    ik = pi./ipn-ni./inn;
    iscores(j) = sum(ims{j}(:) .* ik(:));
end
icrit = prctile(iscores,100 * obias);
pc = iscores >= icrit;
pperf(k,1) = sum(pc == ichoices)./(nn+pn);
pperf(k,2) = b.predchoice(1);
end
pc = iscores >= icrit;
pred(4) = sum(pc == ichoices)./(nn+pn);


function [kernel, details] = CalcPKernel(Expt, pid, nid, pwr, tpwr)



[a,b] = Counts([Expt.Trials(pid).Seedseq]);
[c,d] = Counts([Expt.Trials(nid).Seedseq]);

psum = zeros(size(pwr{1}));
nsum = zeros(size(pwr{1}));
for j = 1:length(a)
    se = b(j);
    psum = psum + pwr{se} .* a(j);
end
for j = 1:length(c)
    nsum = nsum + pwr{d(j)} .* c(j);
end
pim = psum./sum(a);
nim = nsum./sum(c);
details.pim = pim;
details.nim = nim;
details.psum = psum;
details.nsum = nsum;
details.nframes = [sum(a) sum(c)];

kernel = fftshift(pim-nim);

aim = (nsum+psum)./(sum(a)+sum(c));
details.allmean = aim;

if 0
psum = zeros(size(pwr{1}));
nsum = zeros(size(pwr{1}));
for j = 1:length(pid)
    psum = psum + tpwr{j}; %in order as zid = [pid nid]
end
for j = length(pid)+1:length(tpwr)
    nsum = nsum + tpwr{j}; %in order as zid = [pid nid]
end
tk = psum-nsum;    
end

function details = PredictChoice(kernel, tpwr, seeds, choices, details, varargin)
%
%tpwr is not the mean power spectrum for each trial. Avoids a lot of
%expensive arracy indexing
jacknife = 1;

j = 1;
while j <= length(varargin)
    if strncmpi(varargin{j},'nojacknife',3)
        jacknife = 0;
    end
    j = j+1;
end

sk = fftshift(kernel);
nf = size(seeds,1);
for j = 1:length(tpwr)
    resp(j) = sum(tpwr{j}(:) .*sk(:));
end
aresp = resp; %copy so resp can be used for jacknife
if jacknife
%   fsums = sum(pwr(seeds,:,:)); Ntrials * 200 x 256 x 256 = too much
%   memory
    for j = 1:length(choices)
        if choices(j) == 1
        psum = details.psum - tpwr{j} .*nf;
        pn = details.nframes(1) - nf;
        nsum = details.nsum;
        nn = details.nframes(2);
        else
        nsum = details.nsum - tpwr{j}.*nf;
        nn = details.nframes(2)-nf;
        psum = details.psum;
        pn = details.nframes(1);
        end
        ski = (psum./pn) - (nsum./nn); %kernel excluding this trial
        resp(j) = sum(tpwr{j}(:).*ski(:));
    end
else
%calculate projection of each frame onto kernel

end
% set a low criterion to get more + choices
p = sum(choices==-1)./length(choices);
crit = prctile(resp,p.*100);
details.criterion(1) = crit;
pchoice = ((resp >= crit) * 2)-1;
icorrect = choices == pchoice;
correct = (resp >= crit & choices ==1) | (resp < crit & choices == -1);
pc(1) = sum(correct)./length(choices);
pc(2) = p.*p + (1-p).*(1-p); %performance of random prediction
if jacknife
    crit = prctile(aresp,p.*100);
    details.criterion(2) = crit;
    details.pkaresp = aresp;
    correct = (aresp >= crit & choices ==1) | (aresp < crit & choices == -1);
    pc(3) = sum(correct)./length(choices);
end
details.predchoice = pc;
details.pkresp = resp;
pid = find(choices ==1);
nid = find(choices == -1);
psum = details.psum;
nsum = details.nsum;
ski = sk;
j = 1;
scores(1) = sum(ski(:).*sk(:));
while scores(j) > 0 & j < 100
    if length(pid) > length(nid)
        [a, id] = max(aresp(pid));
        psum = psum - tpwr{pid(id)};
        pid = setdiff(pid,pid(id));
    else
        [a, id] = min(aresp(nid));
        nsum = nsum - tpwr{nid(id)};
        nid = setdiff(nid,nid(id));
    end
    pn = length(pid)*nf;
    nn = length(nid)*nf;
    ski = (psum./pn) - (nsum./nn); %kernel excluding this trial
    j = j+1;
    scores(j) = sum(ski(:).*sk(:));
end
details.fixpid = pid;
details.fixnid = nid;

@
