head	1.3;
access;
symbols;
locks
	bgc:1.3; strict;
comment	@// @;


1.3
date	2010.01.06.22.53.24;	author bgc;	state Exp;
branches;
next	1.2;

1.2
date	2009.12.17.20.53.25;	author bgc;	state Exp;
branches;
next	1.1;

1.1
date	2009.12.11.21.45.29;	author bgc;	state Exp;
branches;
next	;


desc
@Makes SPike RC and Psych RC from Image power spectra (ORBW Expts)
@


1.3
log
@before adding phase specific FT averages
@
text
@function [kernel, details] = BuildBWPsychRC(Expt, varargin)

rotate = 0;
nbins = 6;
seedoffset = 815; %works for lemM079
sprc = 0;
delays = [300:50:700];
permute = 0;
ftpwr = [];
fts = [];
framerate = 166.7;

j = 1;
while j <= length(varargin)
    if strncmpi(varargin{j},'delay',4);
        j = j+1;
        delays = varargin{j};
    elseif strncmpi(varargin{j},'predict',4)
        j = j+1;
        kernel = varargin{j};
        pid = find([Expt.Trials.RespDir] == 1 & [Expt.Trials.ob] == 130);
        nid = find([Expt.Trials.RespDir] == -1 & [Expt.Trials.ob] == 130);
        zid = [pid nid];
        ses = [Expt.Trials(zid).Seedseq];
        choices = [Expt.Trials(zid).RespDir];
        details.predchoice = PredictChoice(kernel, ftpwr, ses, choices);
        return;
    elseif strncmpi(varargin{j},'permute',4)
        permute = 1;
        if length(varargin) > j && isnumeric(varargin{j+1})
            j = j+1;
            permute = varargin{j};
        end
    elseif strncmpi(varargin{j},'rotate',4);
        j = j+1;
        rotate = varargin{j} .* pi/180;
    elseif strncmpi(varargin{j},'sprc',4);
            sprc = 1;
    elseif strncmpi(varargin{j},'ftpwr',3);
        j = j+1;
        ftpwr = varargin{j};
    elseif strncmpi(varargin{j},'fts',3);
        j = j+1;
        fts = varargin{j};
        ftpwr = abs(fts);
    end
    j = j+1;
end

if isfield(Expt,'predchoice') & isnumeric(varargin{1}) %its a result file.
    [kernel, details] = PlotKernel(varargin{1}, Expt);
    return;
end
px  = 0.0292;
sf = Expt.Stimvals.sf;
wi = Expt.Stimvals.wi;
or = Expt.Stimvals.or;
bw = 130;
if isfield(Expt.Trials,'seedoffset')
    id = find([Expt.Trials.ob] > 120);
    seedoffset = median([Expt.Trials.ob]);
end
for j = 1:length(Expt.Trials)
    lens(j) = length(Expt.Trials(j).Seedseq);
end
gid = lens >= prctile(lens,90);
badid = find(lens < prctile(lens,90));
for j = 1:length(badid)
    fprintf('Trials %d only %d seeds\n',badid(j),lens(badid(j)));
end
pid = find([Expt.Trials.RespDir] == 1 & [Expt.Trials.ob] == 130 & gid);
nid = find([Expt.Trials.RespDir] == -1 & [Expt.Trials.ob] == 130 &gid);

if length(pid) == 0 | length(nid) == 0
    kernel = NaN;
    return;
end
zid = [pid nid];
choices = [ones(size(pid)) ones(size(nid)).*-1];
if isfield(Expt.Trials,'imseed')
    seedoffset = median([Expt.Trials(zid).imseed]);
end

if isempty(ftpwr)
fts = filterim([sf sf/2], [or bw], wi, 'seedoffset', seedoffset, 'pix2deg', px,'nseeds', 1000, 'getft','noplot');
pwr = abs(fts);
else
    pwr = ftpwr;
end



ses = [Expt.Trials(zid).Seedseq];
sevals = unique(ses);

for p = permute:-1:1
    id = randperm(length(zid));
    ipid = zid(id(1:length(pid)));
    inid = zid(id(length(pid)+1:end));
    ichoices = ones(size(zid));
    ichoices(id(length(pid)+1:end)) = -1;
    k(p,:,:) = CalcPKernel(Expt,ipid, inid, pwr);
    a = PredictChoice(squeeze(k(p,:,:)),pwr,ses, ichoices);
    pperf(p) = a(1);
end

if permute
end
[kernel, details] = CalcPKernel(Expt,pid, nid, pwr);
details.kb = CalcPKernel(Expt,pid(2:end), nid, pwr);

if permute
    details.kernelsd = squeeze(std(k,[],1));
    details.permpred = pperf;
end


for j = 1:size(ses,2)
alltriggers{j} = [];
end
for j = 1:size(ses,2)
    [ij,ik] = find(ses == sevals(j));
    for k = 1:length(ik)
        alltriggers{ik(k)}= {alltriggers{ik(k)} ij(k)};
    end
end

details = PredictChoice(kernel, pwr, ses, choices, details);
details.pkor = AddOriSum(kernel);

if sprc
    for di = 1:length(delays)
        delay = delays(di);
        spseeds = [];
        nf = size(ses,1);
        k = 1:length(zid);
        for j = 1:length(zid)
            frames = floor((Expt.Trials(zid(j)).Spikes-delay)./166);
            frames = frames(find(frames >0 & frames <= nf));
            spseeds = [spseeds ses(frames,k(j))'];
        end

    spsum = zeros(size(pwr,2),size(pwr,3));
    [nspk, sv] = Counts(spseeds);
    for j = 1:length(sv)
        se = sv(j);
        spsum = spsum + nspk(j) .* squeeze(pwr(se,:,:));
    end
    spmean = spsum./sum(nspk) - details.allmean;
    details.spmean(di,:,:) = fftshift(spmean);
    details.spvar(di) = var(spmean(:));
    nspks(di,sv) = nspk;
    end
    [v,t] = max(details.spvar);
    nspk = nspks(t,:);
    [secounts, sevals] = Counts(ses);
    spk = fftshift(details.spmean(t,:,:)); %%undo fftshift above
    for j = 1:length(sevals)
        id = find(sv == sevals(j));
        sid = find(sevals == j);
        if isempty(id) | isempty(sid)
            ps(sevals(j)) = 0;
        else
            ps(sevals(j)) = nspk(sevals(j))./secounts(j);
        end
        fpwr(sevals(j)) = sum(sum(pwr(sevals(j),:,:) .* spk));
    end
    [a,b] = sort(fpwr(sevals));
    k = 1;
    nf = 0;
%if some seeds are missing, than length(fwr) = largest seed, not # of
%seeds
    bincount = sum(secounts)./nbins;
    for j = 1:length(sevals) 
        porder(sevals(b(j))) = k;
        nf = nf+ secounts(b(j));
        if nf > bincount
            nf = 0;
            k = k+1;
        end
    end
    if sum(porder == k) < 100;
        porder(porder == k) = k-1;
    end
    subplot(2,2,1);
    hold off;
    plot(fpwr(sevals),ps(sevals),'o');
    pfit = polyfit(fpwr(sevals),ps(sevals),2);
    netspk(sevals) = polyval(pfit,fpwr(sevals));
    hold on;
    [a,b] = sort(fpwr(sevals));
    plot(a,netspk(b),'linewidth',2);
    [x,y] = xysmooth(fpwr(sevals),ps(sevals),100);
    plot(x,y,'r');
    [x,y] = xysmooth(fpwr(sevals),ps(sevals),10);
    plot(x,y,'g');
    latency = 500;
    for j = zid
        Expt.Trials(j).Predcount = sum(netspk(Expt.Trials(j).Seedseq));
        Expt.Trials(j).count = sum(Expt.Trials(j).Spikes > latency & Expt.Trials(j).Spikes < Expt.Trials(j).dur + latency);
        Expt.Trials(j).sepower = porder(Expt.Trials(j).Seedseq);
    end
    cfig = gcf;
    details.rc = PlotRevCorAny(Expt,'exp','sepower','Trials',zid,'filltimes',166.6,'nmin',100,'box','sdfw',framerate);
    netspk = PlotRC(details.rc,'netspk','sdsmooth',10,'timerange',NaN);
    for j = 1:max(porder)
        id = find(porder == j);
        netspkx(j) = mean(fpwr(id));
    end
    figure(cfig);
    plot(netspkx,netspk,'ro-');
    for j = zid
        Expt.Trials(j).aPredcount = sum(netspk(Expt.Trials(j).sepower));
    end
    subplot(2,2,2);
    hold off;
    plot([Expt.Trials(zid).Predcount],[Expt.Trials(zid).count],'o');
    hold on;
    plot([Expt.Trials(zid).aPredcount],[Expt.Trials(zid).count],'ro');
    subplot(2,2,3);
    imagesc(squeeze(details.spmean(t,:,:)));
    xc = corrcoef(kernel(:), details.spmean(t,:,:));
    details.psxcorr(1) = xc(2,1);
    details.spkor = AddOriSum(squeeze(details.spmean(t,:,:)));
    xc = corrcoef(details.pkor, details.spkor);
    details.psxcorr(2) = xc(2,1);
    title(sprintf('VarRatio %.2f Pkxc %.3f,%.3f',details.spvar(t)./details.spvar(1),details.psxcorr(1),details.psxcorr(2))); 
    details.cp = CalcCP([Expt.Trials(pid).count],[Expt.Trials(nid).count]);
    details.ccp(1) = CalcCP([Expt.Trials(pid).count]-[Expt.Trials(pid).Predcount],...
        [Expt.Trials(nid).count]-[Expt.Trials(nid).Predcount]);
    details.ccp(2) = CalcCP([Expt.Trials(pid).count]-[Expt.Trials(pid).aPredcount],...
        [Expt.Trials(nid).count]-[Expt.Trials(nid).aPredcount]);
    details.ccp(3) = CalcCP([Expt.Trials(details.fixpid).count],[Expt.Trials(details.fixnid).count]);
    title(sprintf('CP %.2f, %.2f, %.2f',details.cp,details.ccp(1),details.ccp(2)));
    subplot(2,2,4);
end
    


for r = 1:20
    angle = [0:pi/50:2*pi];
    xi = r.*cos(angle);
    yi = r .* sin(angle);
end
if rotate
    [xi, yi] = meshgrid([1:wi],[1:wi]);
    xr = (xi-128) .* cos(pi/4) + (yi-128) .* sin(pi/4);
    yr = (yi-128) .* cos(pi/20) - (xi-128) .* sin(pi/20);
end
imagesc(kernel);
details.pkor = AddOriSum(kernel);
details.pkvar = var(kernel(:));
details.fts = fts;

function [kernel, details] = CalcPKernel(Expt, pid, nid, pwr)



[a,b] = Counts([Expt.Trials(pid).Seedseq]);
[c,d] = Counts([Expt.Trials(nid).Seedseq]);

psum = zeros(size(pwr,2),size(pwr,3));
nsum = zeros(size(pwr,2),size(pwr,3));
for j = 1:length(a)
    se = b(j);
    psum = psum + squeeze(pwr(se,:,:)) .* a(j);
end
for j = 1:length(c)
    nsum = nsum + squeeze(pwr(d(j),:,:)) .* c(j);
end
pim = psum./sum(a);
nim = nsum./sum(c);
details.pim = pim;
details.nim = nim;
details.psum = psum;
details.nsum = nsum;
details.nframes = [sum(a) sum(c)];

kernel = fftshift(pim-nim);

aim = (nsum+psum)./(sum(a)+sum(c));
details.allmean = aim;


function [kernel, details] = PlotKernel(kernel, details)
subplot(2,1,1);
hold off;
imagesc(kernel);
AddOriSum(kernel);
[a,t] = max(details.spvar);
title(sprintf('Pk: var %.2f, xc %.3f,%.3f',details.pkvar,details.psxcorr(1),details.psxcorr(2))); 
subplot(2,1,2);
hold off;
[a,t] = max(details.spvar);
sk = squeeze(details.spmean(t,:,:));
imagesc(sk);
AddOriSum(sk);
title(sprintf('VarRatio %.2f, CP %.2f, %.2f, %.2f',details.spvar(t)./details.spvar(1),...
    details.cp,details.ccp(1),details.ccp(2)));


function sor = AddOriSum(kernel)
coss = cos([0:pi/90:pi]);
sins = sin([0:pi/90:pi]);
for r = 0.5:45.5
    xi = r .* coss;
    yi = r .* sins;
    sir(ceil(r),:) = interp2(kernel, 129.5+xi, 129.5+yi);
end
svar = var(sir');
id = find(svar > max(svar)./50);
r = id(end);
xi = 129 + [r .* coss; (r-1) .* coss];
yi = 129 + [r .* sins; (r-1) .* sins];
uxi = 129 - [r .* coss; (r-1) .* coss];
uyi = 129 - [r .* sins; (r-1) .* sins];
cr = caxis;
sor = sum(sir);
sor = (range(cr) .* (sor - min(sor))./range(sor)) + cr(1);
set(gca,'xlim',[129-r 129+r],'ylim',[129-r 129+r]);
hold on;
pcolor(xi,yi,[sor; sor]);
pcolor(uxi,uyi,[sor; sor]);
[a, b] = max(sor);
[a, c] = min(sor);
plot([xi(1,b) uxi(1,b)],[yi(1,b) uyi(1,b)],'r');
plot([xi(1,c) uxi(1,c)],[yi(1,c) uyi(1,c)],'b');
shading('flat');




function details = PredictChoice(kernel, pwr, seeds, choices, details)

jacknife = 1;

sk = fftshift(kernel);
nf = size(seeds,1);
for j = 1:size(pwr,1)
    fpwr(j) = sum(sum(squeeze(pwr(j,:,:)).*sk));
end
resp = sum(fpwr(seeds));
if jacknife
    aresp = resp;
    for j = 1:length(choices)
        fsum = squeeze(sum((pwr(seeds(:,j),:,:))));
        if choices(j) == 1
        psum = details.psum - fsum;
        pn = details.nframes(1) - nf;
        nsum = details.nsum;
        nn = details.nframes(2);
        else
        nsum = details.nsum - fsum;
        nn = details.nframes(2)-nf;
        psum = details.psum;
        pn = details.nframes(1);
        end
        ski = (psum./pn) - (nsum./nn); %kernel excluding this trial
        resp(j) = sum(sum(fsum.*ski));
    end
else
%calculate projection of each frame onto kernel

end
% set a low criterion to get more + choices
p = sum(choices==-1)./length(choices);
crit = prctile(resp,p.*100);
correct = (resp >= crit & choices ==1) | (resp < crit & choices == -1);
pc(1) = sum(correct)./length(choices);
pc(2) = p.*p + (1-p).*(1-p); %performance of random prediction
if jacknife
    crit = prctile(aresp,p.*100);
    correct = (aresp >= crit & choices ==1) | (aresp < crit & choices == -1);
    pc(3) = sum(correct)./length(choices);
end
details.predchoice = pc;

pid = find(choices ==1);
nid = find(choices == -1);
psum = details.psum;
nsum = details.nsum;
ski = sk;
j = 1;
scores(1) = sum(ski(:).*sk(:));
while scores(j) > 0 & j < 100
    if length(pid) > length(nid)
        [a, id] = max(aresp(pid));
        fsum = squeeze(sum((pwr(seeds(:,pid(id)),:,:))));
        pid = setdiff(pid,pid(id));
        psum = psum - fsum;
    else
        [a, id] = min(aresp(nid));
        fsum = squeeze(sum((pwr(seeds(:,nid(id)),:,:))));
        nsum = nsum - fsum;
        nid = setdiff(nid,nid(id));
    end
    pn = length(pid)*nf;
    nn = length(nid)*nf;
    ski = (psum./pn) - (nsum./nn); %kernel excluding this trial
    j = j+1;
    scores(j) = sum(ski(:).*sk(:));
end
details.fixpid = pid;
details.fixnid = nid;
@


1.2
log
@before adding jacknife to psych kernel prediction
@
text
@d4 1
d11 2
d49 5
d74 4
d92 1
a92 1
gid
d110 1
d128 2
a129 1
details.predchoice = PredictChoice(kernel, pwr, ses, choices);
d168 17
d187 3
a189 3
    plot(fpwr,ps,'o');
    pfit = polyfit(fpwr,ps,2);
    netspk = polyval(pfit,fpwr);
d191 1
a191 1
    [a,b] = sort(fpwr);
d193 1
a193 1
    [x,y] = xysmooth(fpwr,ps,100);
d195 1
a195 1
    [x,y] = xysmooth(fpwr,ps,10);
d197 1
d200 14
d216 1
d218 2
d222 6
d229 1
a229 1
    details.ccp = CalcCP([Expt.Trials(pid).count]-[Expt.Trials(pid).Predcount],...
d231 4
a234 1
    details.spkor = AddOriSum(squeeze(details.spmean(t,:,:)));
d252 1
d275 4
d285 17
a331 1
function pc = PredictChoice(kernel, pwr, seeds, choices)
d333 4
a336 1
%calculate projection of each frame onto kernel
d338 1
d342 21
d364 1
a364 1
resp = sum(fpwr(seeds));
d371 34
@


1.1
log
@Initial revision
@
text
@a9 8

if isfield(Expt,'allmean') %arg 1 is a result from BwPsychRC
    kernel = varargin{1};
    details = PlotBWRC(Expt, varargin{:});
    return;
end


a45 2


d61 1
a61 1
    fprintf('Trial %d only %d seeds\n',badid(j),lens(badid(j)));
a66 5
if isempty(zid)  % no data for kenel
    kernel = NaN;
    details = [];
    return;
end
d80 1
a80 1

a195 10
function details = PlotBWRC(details, kernel, varargin)
    [v,t] = max(details.spvar);
    subplot(2,1,1);
    imagesc(squeeze(details.spmean(t,:,:)));
    AddOriSum(squeeze(details.spmean(t,:,:)));
    subplot(2,1,2);
    imagesc(kernel);
    AddOriSum(kernel);


@
