function [CC, GM] = CondenseClusters(C, varargin)%[CC, GM] = PC.CondenseClusters(C) remove objects from cell array%of clusters so that passing the array around is not slow (!!!)%%if C is a figure handle, gets the appdata and sets it back%PC.CondenseClusters(figure,'-struct')  replaces the appdata with% a cell array of structs, instead of cell array of cell arrays. This% seems to fix the problems, but needs code changes still%currently used on command line for testing if code accepts new format%PC.CondenseClusters(figure,'-revert') goes back to cell arraysstrargs = cell2cellstr(varargin);if isfigure(C)    if isappdata(C,'Clusters')        if sum(strcmp('-struct',strargs))            CellConvert(C, 'Clusters');        elseif sum(strcmp('-revert',strargs))            CellRevert(C, 'Clusters');        else            X = getappdata(C,'Clusters')            [CC, GM] = PC.CondenseClusters(C);            setappdata(C,'Clusters',CC);            setappdata(C,'ClusterFits',GM);        end    end    if isappdata(C,'AutoClusters')        if sum(strcmp('-struct',strargs))            CellConvert(C, 'AutoClusters');        elseif sum(strcmp('-revert',strargs))            CellRevert(C, 'AutoClusters');        else            X = getappdata(C,'AutoClusters')            [CC, GM] = PC.CondenseClusters(C);            setappdata(C,'AutoClusters',CC);            setappdata(C,'AutoClusterFits',GM);        end    endelseif iscell(C)    for j = 1:length(C)        [CC{j}, GM{j}] = PC.CondenseCluster(C{j});    endendfunction CellConvert(C, f)X = getappdata(C,f);for j = 1:length(X)    Y{j} = CellToStruct(X{j},'nopad');endsetappdata(C,f,Y);function CellRevert(C, f)X = getappdata(C,f);for j = 1:length(X)    for k = 1:length(X{j})        Y{j}{k} = X{j}(k);    endendsetappdata(C,f,Y);