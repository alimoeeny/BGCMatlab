function out = ReplotXcorrs(a,b, type, varargin)%ReplotXcorrs(handle ,b, type)%ReplotXcorrs(handle ,b, 'duplicates')%ReplotXcorrs(handle ,b, 'duplicates', G)interactive = 0;j = 1;while j <= length(varargin)    if strcmp(varargin{j},'interactive')        interactive = 1;    end    j = j+1;end    DATA = GetDataFromFig(a);    if sum(strcmpi(type, {'duplicates' 'showduplicates'}))        out = PlotExptDuplicates(DATA, type, varargin{:});        return;    end    xcorrs = getappdata(DATA.toplevel,'xcorrs');    F = 0;    if sum(strcmpi(type, {'meanim' 'xcorr' 'syncspikes' 'histograms' 'alleg'}))        DATA.plot.xcorrtype = type;        SetMenuCheck(a,'exclusive');        set(DATA.toplevel,'UserData',DATA);            elseif strcmp(type,'calctime') %time really just related to # events        hold off;         plot(sum(cat(1,xcorrs.xc),2),diff([0 xcorrs.ts]),'o')           elseif strcmpi(type, 'nspkEfficacy')        DATA.plot.xcorrpoptype = type;        F = GetFigure(DATA.tag.xcorrpop,DATA.toplevel);        ClearPlot;        hold off;        for j = 1:length(xcorrs)            plot(xcorrs(j).nspk(1), xcorrs(j).efficacy(1),'o',...                'buttondownfcn',{@PC.PlotXcorr, xcorrs(j).p(1),xcorrs(j).p(2)});            hold on;        end        set(gca,'yscale','log','ylim',[min([xcorrs.shapexc]) 1],'xscale','log');        ylabel('Efficacy');        xlabel('NSpks');    elseif sum(strcmpi(type, { 'duplicates'}))        PlotExptDuplicates(DATA);    elseif sum(strcmpi(type, {'Efficacy Matrix' 'Efficacy' 'duplicates'}))        ndup = 0;        for j = 1:length(xcorrs)            probes(j,1) = xcorrs(1).p(1);            probes(j,2) = xcorrs(1).p(2);        end        if strcmpi(type,'duplicates')            plottype = 1;        else            plottype = 0;        end        nd = 0;        for j = 1:length(xcorrs)            X = xcorrs(j);            a = max(X.efficacy([1 2]));            b = max(X.efficacy([3 4]));            if isnan(a)                a = 0;            end            if plottype ==1                xIm(X.p(1),X.p(2)) = X.efficacy(1);                xIm(X.p(2),X.p(1)) = X.efficacy(2);                if X.p(1) == X.p(2)                    Im(X.p(1),X.p(2)) = NaN;                    xIm(X.p(1),X.p(2)) = 1;                elseif a > 0.1 && a > b * 1.5                    nd = nd+1;                    duplicates(nd,:) = X.p;                    probepairs(nd,:) = X.probe;                    dupid(nd) = j;                    effic(nd) = a;                else                    Im(X.p(1),X.p(2)) = 0;                end            else                Im(X.p(1),X.p(2)) = X.efficacy(1);                Im(X.p(2),X.p(1)) = X.efficacy(2);            end                labels{X.p(1)} = sprintf('%.1f',X.probe(1));        end                F = GetFigure(DATA.tag.xcorrpop,DATA.toplevel);        hold off;        if plottype == 1            I = imagesc(Im, 'buttondownfcn',{@ImageHit,'duplicates'});            for j = 1:ndup                square(1,1:5) = ubest(j) + [-0.5 -0.5 0.5 0.5 -0.5];                square(2,1:5) = ubest(j) + [-0.5 0.5 0.5 -0.5 -0.5];                line(square(1,:),square(2,:),'color','w', 'linewidth',2);            end        else            I = imagesc(Im, 'buttondownfcn',{@ImageHit,'paireffic'});        end        set(gca,'ytick',1:length(labels),'yticklabel',labels);        set(gca,'xtick',1:length(labels),'xticklabel',labels);    elseif strcmpi(type, 'Shape/Efficacy')        DATA.plot.xcorrpoptype = type;        F = GetFigure(DATA.tag.xcorrpop,DATA.toplevel);        ClearPlot;        hold off;        for j = 1:length(xcorrs)            plot(xcorrs(j).shapexc, max(xcorrs(j).efficacy),'o',...                'buttondownfcn',{@PC.PlotXcorr, xcorrs(j).p(1),xcorrs(j).p(2)});            hold on;        end        set(gca,'yscale','log','ylim',[min([xcorrs.shapexc]) 1]);        ylabel('Efficacy');        xlabel('Shape Xcorr');    elseif strcmpi(type, 'cmpefficacy')        F = GetFigure(DATA.tag.xcorrpop,DATA.toplevel);        hold off;        for j = 1:length(xcorrs)            c(j) = max(xcorrs(j).efficacy([1 2]));            r(j) = max(xcorrs(j).efficacy([3 4]));        end                plot(c,r,'o', 'buttondownfcn',{@ScatterHit,'cmpeffic'});        set(gca,'xlim',[0 1]);        yl = get(gca,'ylim');        line([0 yl(2)],[0 yl(2)]);        xlabel('Efficacy dt < 0.1ms');        ylabel('Efficacy: 0.1ms < dt < 1ms')    elseif strcmpi(type, 'efficsep')        F = GetFigure(DATA.tag.xcorrpop,DATA.toplevel);        for j = 1:length(xcorrs)            c(j) = max(xcorrs(j).efficacy);            r(j) = xcorrs(j).separation;        end                plot(c,r,'o', 'buttondownfcn',{@ScatterHit,'efficsep'});    elseif strcmpi(type, 'pairsep')        F = GetFigure(DATA.tag.xcorrpop,DATA.toplevel);        for j = 1:length(xcorrs)            c = xcorrs(j).p(1);            r = xcorrs(j).p(2);            if c ~= r                Im(c,r) = xcorrs(j).separation;                Im(r,c) = xcorrs(j).separation;            end                    end                hold off;         imagesc(Im, 'buttondownfcn',{@ImageHit,'paireffic'});        colorbar;    elseif strcmpi(type, 'paireffic')        F = GetFigure(DATA.tag.xcorrpop,DATA.toplevel);        for j = 1:length(xcorrs)            c = xcorrs(j).cells(1);            r = xcorrs(j).cells(2);            if c ~= r                Im(c,r) = xcorrs(j).effic(1);                Im(r,c) = xcorrs(j).effic(2);            end                    end                imagesc(Im, 'buttondownfcn',{@ImageHit,'paireffic'});        colorbar;    end    if(F)        PC.AddPlotMenu(F,'xcorrplot');    end function AddDuplicateMenu(a)      it = findobj(a,'type','uimenu','tag','DuplicateMenu');     if isempty(it)         hm = uimenu(a,'label','Duplicates','tag','DuplicateMenu');         sm = uimenu(hm,'label', 'Mark All Duplicates, interactive','callback',{@SetDuplicateMenu, 'setinteractive'});         sm = uimenu(hm,'label', 'Mark All Duplicates, Nointeractive','callback',{@SetDuplicateMenu, 'noninteractive'});         sm = uimenu(hm,'label', 'Mark All Duplicates All Expt, Nointeractive','callback',{@SetDuplicateMenu, 'allexpts'});     end    function CellGroups = PlotExptDuplicates(DATA, type, varargin)    G = [];    if isfield(DATA,'tag')        figtag = DATA.tag.xcorrpop;    else        figtag = 'Duplicates';    end    xcorrs = [];    cells = [];    interactive = 0;    j = 1;    while j <= length(varargin)        if isfield(varargin{j},'separation')            xcorrs = varargin{j};        elseif isfield(varargin{j},'xcorrs') && isfield(varargin{j},'cells')             G = varargin{j};            xcorrs = G.xcorrs;            cells = G.cells;        elseif isfield(varargin{j},'eid')            cells = varargin{j};        elseif strcmp(varargin{j},'interactive')            interactive = 1;        end        j = j+1;    end    if isempty(xcorrs)        xcorrs = getappdata(DATA.toplevel,'xcorrs');        cells = getappdata(DATA.toplevel,'xcCellList');    else %if given on the command line, set the appdata to match        setappdata(DATA.toplevel,'xcorrs',xcorrs);        setappdata(DATA.toplevel,'xcCellList',cells);    end    CellGroups = [];    j = 1;    while j <= length(varargin)        if isfield(varargin{j},'xcorrs')            C = varargin{j};            xcorrs = C.xcorrs;            cells = C.cells;        elseif strncmpi(varargin{j},'figtag',6)            j = j+1;            figtag = varargin{j};        end        j = j+1;    end        if isempty(cells) || isempty(xcorrs)        return;    end    if min([cells.dp] < -1)        [cells.dp] = deal(-[cells.dp]');    end    probes = [cells.p] + [cells.cl]/10;    if ~isfield(cells,'cell')        for j = 1:length(cells)            [~, cells(j).cell] = PC.isacell(DATA, cells(j));        end    end    SetData(DATA);    if isfield(DATA,'currentpoint')        eid = DATA.currentpoint(1);        DATA.duplicates.expt = PC.GetExptno(DATA,eid,'expt');    else        eid = prctile([cells.eid],50);    end    ndup = 0;    CellGroups.cells = cells;    CellGroups.cellid = [cells.cell];    CellGroups.probes = [cells.p] + ([cells.cl])/10;    CellGroups.xcorrs = xcorrs;    if isfield(G,'expt')        CellGroups.expt = G.expt;    elseif isfield(DATA,'exptno') && DATA.exptno > 0        CellGroups.expt = DATA.exptno;    elseif isfield(DATA,'CellDetails')        CellGroups.expt = DATA.CellDetails.exptids(eid);    end    CellGroups.eid = eid; %row for celllist    if strcmp(type,'showduplicates') %show existing dups in Celllist        p = cat(1,xcorrs.probe);        [~,cellid] = PC.isacell(DATA, eid, p);        dpairs = find(sum((cellid ~= 0)')==2);        xcorrs = xcorrs(dpairs);    end    for j = 1:length(xcorrs)            probes(j,1) = xcorrs(1).p(1);            probes(j,2) = xcorrs(1).p(2);    end    plottype = 1;        nd = 0;        duplicates = [];        for j = 1:length(xcorrs)            X = xcorrs(j);            if length(X.efficacy) > 5                effid = [5 6];            else                effid = [1 2];            end            a = max(X.efficacy(effid));            b = max(X.efficacy([3 4]));            if isnan(a)                a = 0;            end                xIm(X.p(1),X.p(2)) = X.efficacy(effid(1));                xIm(X.p(2),X.p(1)) = X.efficacy(effid(2));                [isdup, dupscore] = PC.IsSameCell(X);                if X.p(1) == X.p(2)                    Im(X.p(1),X.p(2)) = NaN;                    xIm(X.p(1),X.p(2)) = 1;                elseif isdup > 0                    nd = nd+1;                    duplicates(nd,:) = X.p;                    probepairs(nd,:) = X.probe;                    dupid(nd) = j;                    effic(nd) = a;                elseif isdup == -1                    fprintf('Dubious Efficacy %.1f<->%.1f, %.3f - also get %.3f nearby. Ratio for coincidence %.1f. #Events%d\n',...                            X.probe(1),X.probe(2),dupscore(1),b,X.efficacy(7),X.efficacy(8));                        if interactive && isfield(X,'xc');                            GetFigure(DATA.tag.xcorr,DATA.toplevel);                            hold off;                            plot(X.xc);                            title(sprintf('%.1f<->%.1f', X.probe(1),X.probe(2)));                        end                end                labels{X.p(1)} = sprintf('%.1f',X.probe(1));        end        if strcmp(type,'duplicates') && nd == 0            groups = {};            F = GetFigure(figtag,DATA.toplevel);            hold off;            O = SetDiag(xIm,0);            I = imagesc(O);            set(I,'buttondownfcn',{@ImageHit,'duplicates'});            set(gca,'ytick',1:length(labels),'yticklabel',labels);            set(gca,'xtick',1:length(labels),'xticklabel',labels);            for j = 1:size(O,1)                text(j,j,sprintf('cell%d',cells(j).cell),'color','w','HorizontalAlignment','center');            end            title(sprintf('Expt %d No Duplicates',CellGroups.expt));            CellGroups.Figure = F;            CellGroups.nduplicates = 0;%            setappdata(F,'xcorrs',xcorrs);        return;        elseif strcmp(type,'duplicates')            groups = {};            probes = [cells.p] + [cells.cl]/10;            for j = 1:length(cells)                [~, cells(j).cell] = PC.isacell(DATA, cells(j));            end            dc = unique(duplicates);            F = GetFigure(figtag,DATA.toplevel);            for j = 1:length(dc)                [a,b] = find(duplicates == dc(j));                p = unique(duplicates(a,:)); %all pairs involving dc(j)                ps{j} = p(:);                d = [cells(p).dp];                d(d < 0) = 0;                [dp, dpi] = sort(d);                [drops, dropi] = sort([cells(p).dropi]);                [a,b] = sort(d .* [cells(p).dropi]);                best(j) = p(b(end));                [a,b] = find(duplicates == best(j));                p = unique(duplicates(a,:)); %all pairs involving dc(j)                bestps{j} = p; %all cells that are duplicates of the best                dupprobes{j} = p(:);                if max(Counts([cells(p(:)).p])) > 1                    dupprobe = 1;                end            end                ubest = unique(best);                ndup = length(ubest);%Find unique groups                %                [ups, uid] = uniquegroups(ps);%or collapse groups together than contain a common element.                 [ups, uid] = CombineGroups(ps);                fprintf('%d Best clusters, %d groups\n',ndup,length(ups));                D.probes = dupprobes;                D.best = best;                if isfield(DATA,'toplevel')                    setappdata(DATA.toplevel,'duplicates',D);                else                    CellGroups.duplicates = D;                end            grouponce = 0;            if grouponce                xIm = xIm(dc,dc);               [X, score, pid] = squishDistanceMatrix(xIm,'min','laps',1);               [igroups, details] = GroupByOverlap(X);               hold off;               imagesc(X);               hold on;               for j = 1:length(igroups)                   PC.DrawBox([min(igroups{j}) max(igroups{j})],[min(igroups{j}) max(igroups{j})],'duplicates');               end            end%its much more efficiente to break into clearly separate groups first, and%then assign groupings within those based on the matrix.%Check first if any cell is in more than one group.                         cinc = 1./(length(ndup)-1);            colors = randperm(ndup)./ndup;            colors = mod(ceil([1:ndup] * 3),ndup)./ndup;            ts = now;            for j = 1:length(uid)                di = best(uid(j));                [a,b] = find(duplicates == best(uid(j)));                nc = sum(ismember(ups{j},ubest));                if nc > 1                    fprintf('Making Groups for %d(%d):%s\n',dc(uid(j)),j,sprintf(' %d',ups{j}));                    [newgroups, selfgroups] = GroupDuplicates(DATA,ups{j},CellGroups, duplicates, D);                    groups = {groups{:} newgroups{:}};                else                    fprintf('Single Group for%s(%s)\n',sprintf(' %d',ups{j}),sprintf(' %.1f',probes(ups{j})));                    groups = {groups{:} ups{j}};                end                Im(di,duplicates(a,:)) = colors(find(ubest == di));                Im(duplicates(a,:), di) = colors(find(ubest == di));            end            x = uniquegroups(groups);            x = SubsumeGroups(x);            [x, CellGroups] = FixPromiscuity(x, CellGroups);            [nid, allid] = Counts(cat(1,x{:}));            nogroup = setdiff(1:size(xIm,1),allid);            d = [];            for j = 1:length(nogroup)                for k = 1:length(x)                    d(k) = mean(xIm(nogroup(j),x{k}));                end                [~,k] = max(d);                if k >= length(x)                    x{end+1} = nogroup(j);                else                    x{end+1} = x{k};                    x{k} = nogroup(j);                end            end            igroups = x;            for j = 2:length(x)                for k = 1:j;                    gIm(j,k) = nanmean(nanmean(xIm(x{j},x{k})))+nanmean(nanmean(xIm(x{k},x{j})));                    oIm(j,k) = length(intersect(x{j},x{k}));                    oIm(k,j) = oIm(j,k);                    gIm(k,j) = gIm(j,k);                end            end            [O, score, pid] = squishDistanceMatrix(gIm,'min','laps',1,'waitbar');            newpid = x{pid(1)}; %first group            for j = 2:length(pid)                [~, ia] = setdiff(x{pid(j)},newpid);                newpid = cat(1,newpid, x{pid(j)}(sort(ia)));            end            O = RemapSquareMatrix(xIm, newpid);            O = SetDiag(O,0);            for j = 1:length(igroups)                if length(igroups{j}) > 1                    gbest(j) = BestCell(cells, igroups{j});                    k = find(newpid == gbest(j));                    O(k,k) = 1;                    bestk(j) = k;                else                    gbest(j) = igroups{j}(1);                end            end            CellGroups.bestcell = gbest;        else            [a,b] = Counts(abs([cells.cell]));            cid = find(a >1 & b > 0 & b < 100);            igroups = {};            for j = 1:length(cid)                id = find(abs([cells.cell]) == b(cid(j)));                igroups{j} = id';            end            for j = 2:length(igroups)                for k = 1:j;                    gIm(j,k) = nanmean(nanmean(xIm(igroups{j},igroups{k})))+nanmean(nanmean(xIm(igroups{k},igroups{j})));                    oIm(j,k) = length(intersect(igroups{j},igroups{k}));                    oIm(k,j) = oIm(j,k);                    gIm(k,j) = gIm(j,k);                end            end            [O, score, pid] = squishDistanceMatrix(gIm,'min','laps',1,'waitbar');            newpid = igroups{pid(1)}; %first group            for j = 2:length(pid)                [~, ia] = setdiff(igroups{pid(j)},newpid);                newpid = cat(1,newpid, igroups{pid(j)}(sort(ia)));            end            O = RemapSquareMatrix(xIm, newpid);            O = SetDiag(O,0);        end        if isfield(DATA,'toplevel')            F = GetFigure(figtag,DATA.toplevel);        else            F = GetFigure(figtag);        end            subplot(1,1,1);            hold off;            I = imagesc(O,'buttondownfcn',{@ImageHit,'duplicates'});            hold on;            for j = 1:length(igroups)                ig = find(ismember(newpid,igroups{j}));                if length(ig) > 1                    l = min(ig);                    r = max(ig);                    if sum(CellGroups.cellid(igroups{j}))                        linecolor = 'y';                    else                        linecolor = 'w';                    end                                            PC.DrawBox([l r],[l r],{@ImageHit, 'duplicates'},'color',linecolor);                end            end            noncell = sum([cells.cell] <= 0);            for j = 1:length(newpid)                if cells(newpid(j)).cell > 0%if looking at dupicate clusters and cells, mark the cells                                        if noncell >0                        PC.DrawBox(j,j,{@ImageHit, 'duplicates'},'color','w');                    end                    if j > length(newpid)/2                        text(j-4,j,sprintf('cell%d',cells(newpid(j)).cell),'color','w','HorizontalAlignment','right');                    else                        text(j+4,j,sprintf('cell%d',cells(newpid(j)).cell),'color','w','HorizontalAlignment','left');                    end                end            end            xlabels = labels(newpid);            set(gca,'ytick',1:length(labels),'yticklabel',xlabels);            set(gca,'xtick',1:length(labels),'xticklabel',xlabels);            CellGroups.order = newpid;            CellGroups.groups = igroups;                       for j = 1:length(igroups)                CellGroups.grouplen(j) = length(igroups{j});            end            CellGroups.nduplicates = ndup;            setappdata(F,'CellGroups',CellGroups);            for j = 1:ndup                Im(ubest(j),ubest(j)) = colors(j);            end%Build image showing groups with overlap                        for j = 2:length(igroups)                for k = 1:j-1                    overlap(j,k) = sum(ismember(igroups{j},igroups{k}));                end            end            cmenu = uicontextmenu;            uimenu(cmenu,'label','Show Sync Spikes These probes','Callback',{@SetDuplicateGUI 'showspikes'});            uimenu(cmenu,'label','Show QuickSpikes for group','Callback',{@SetDuplicateGUI 'showgroupspikes'});            uimenu(cmenu,'label','Compare Spikes','Callback',{@SetDuplicateGUI 'comparequickspikes'});            uimenu(cmenu,'label','Compare Mean Spikes','Callback',{@SetDuplicateGUI 'comparemeanspikes'});            uimenu(cmenu,'label','Compare Mean Spike (Image)','Callback',{@SetDuplicateGUI 'comparemeanimage'});            uimenu(cmenu,'label','Show MeanSpikes for group','Callback',{@SetDuplicateGUI 'showgroupmeanspike'});            uimenu(cmenu,'label','Mark this in CellList','Callback',{@SetDuplicateGUI, 'mark'});            set(gca,'UIContextMenu',cmenu);            set(I,'UIContextMenu',cmenu);            fprintf('PlotDuplicates took %.2f for %d clusters in %d groups\n',mytoc(ts),length(newpid),length(ups));            AddDuplicateMenu(F);            title(sprintf('Duplicats for Expt %d',CellGroups.expt));            CellGroups.Figure = F;%            setappdata(F,'xcorrs',xcorrs);    function [x,G] = FixPromiscuity(x, G)    [nid, allid] = Counts(cat(1,x{:}));    nid = allid(nid>1); %cells in two groups.    G.promiscuous = nid;        for j = 1:length(nid)        eff = [];        nspks = [];        nspk = G.cells(nid(j)).nspk;        gid = find(cellmember(nid(j),x));        nc = 0;        for k = 1:length(gid)            id = setdiff(x{gid(k)},nid(j));            for c = 1:length(id)                nc = nc+1;                [xc, xid, D] = PC.FindXCorr(G, [nid(j) id(c)]);                eff(nc,:) = D.efficacy;                                nspks(nc,:) = D.nspk;                groups(nc) = k;                dps(nc) = G.cells(id(c)).dp;            end%            if length(x{id(k)}) > 2%old rule just removes it from all groups wiht > 2                %                x{id(k)} = setdiff(x{id(k)},nid(j));%            end        end%eff(1) is % of 1 in 2.  So if this is low,  #1 may be MU with many events%1 should then have more spikes.  If both true, the prmiscuos cell is the%probem        keepid = [];        if diff(mean(eff)) > 0 && diff(mean(nspks)) < 0            if mean(dps) > G.cells(nid(j)).dp %also expected%leave it in the group where it most nearly matches one of the cells                                [~,keepid] = max(eff(:,2));            end        elseif diff(mean(eff)) < 0 && diff(mean(nspks)) > 0             if mean(dps) < G.cells(nid(j)).dp %also expected                fprintf('Promiscuous Cell %dis Best!!\n',cells(nid(j).cell));                [~,keepid] = max(eff(:,1));                                G.fixpromisc(j).type = 'Best';            end        else        end        if isempty(keepid)            G.fixpromisc(j).keep = NaN;            fprintf('Promiscuity not resolved\n');        else            G.fixpromisc(j).keep = keepid;            id = find(groups ~= groups(keepid));            for k = 1:length(id)                g = gid(groups(id(k)));                x{g} = setdiff(x{g},nid(j));            end        end    end            function ScatterHit(a,b, type)p = get(gca,'currentpoint');pos = p(1,1) + i * p(1,2);DATA = GetDataFromFig(a);c = findobj(gca,'type','line','linestyle','none');x = get(c,'Xdata');y = get(c,'Ydata');d = abs(pos - (x + y.*i));[a,b] = min(d);PC.PlotXcorr(DATA,DATA.plot.xcorrtype,'xcorr', b);    function ImageHit(a,b, type)                DATA = GetDataFromFig(a);        F = GetFigure(a);       pos = round(get(gca,'currentpoint'));       cid(1) = pos(1,1);       cid(2) = pos(1,2);               xcorrs = getappdata(DATA.toplevel,'xcorrs');       if isappdata(F,'CellGroups')           CellGroups = getappdata(F,'CellGroups');           cid = CellGroups.order(cid);           if isfield(CellGroups,'xcorrs')               xcorrs = CellGroups.xcorrs;           end       else           CellGroups = [];       end       pid = cat(1,xcorrs.p);       aid = find(pid(:,1) == cid(1) & pid(:,2) == cid(2));       bid = find(pid(:,2) == cid(1) & pid(:,1) == cid(2));       id = unique([aid bid]);       if strcmp(type,'duplicates');        smode = get(gcf,'SelectionType');        if strcmp(smode,'alt') %R button - just show menu            G = getappdata(F,'CellGroups');            if isfield(CellGroups,'cells')                cells = CellGroups.cells;            else                cells = getappdata(DATA.toplevel,'xcCellList');            end            cmenu = uicontextmenu;            if diff(cid) ==0                gid = find(cellmember(cid(1),CellGroups.groups));                Gi = CellGroups.groups{gid(1)};                [~,cellid] = PC.isacell(DATA, cells(cid(1)));                if cellid == 0 %this square not a cell, use best in group                    gid = find(cellmember(cid,G.groups));                    cellid = G.cellid(G.groups{gid(1)});                    cellid = cellid(cellid > 0);                    if length(cellid) > 1                        cellid = BestCell(cells,cellid);                    end                end                str = '';                for j = 1:length(Gi)                    if Gi(j) ~= cid(1)                        str = sprintf('%s %d.%d',str,cells(Gi(j)).p,cells(Gi(j)).cl);                    end                end                lb = sprintf('Mark %d/%d as cell %d, rest (%s) as duplicate',...                    cells(cid(1)).p,cells(cid(1)).cl,cellid,str);                uimenu(cmenu,'label',lb, 'Callback',{@SetDuplicateGUI 'setduplicates' cellid cid(1)});            end            uimenu(cmenu,'label','Show Sync Spikes These probes','Callback',{@SetDuplicateGUI 'showspikes'});%            uimenu(cmenu,'label','Show xcorr These probes','Callback',{@SetDuplicateGUI 'showxcorr'});            uimenu(cmenu,'label','Compare Spikes','Callback',{@SetDuplicateGUI 'comparequickspikes'});            uimenu(cmenu,'label','Compare Mean Spikes','Callback',{@SetDuplicateGUI 'comparemeanspikes'});            uimenu(cmenu,'label','Compare Mean Spike (Image)','Callback',{@SetDuplicateGUI 'comparemeanimage'});            uimenu(cmenu,'label','Show xcorrs for group','Callback',{@SetDuplicateGUI 'showgroupxcorr'});            uimenu(cmenu,'label','Show Spikes for group','Callback',{@SetDuplicateGUI 'showgroupspikes'});            uimenu(cmenu,'label','Show MeanSpikes for group','Callback',{@SetDuplicateGUI 'showgroupmeanspike'});            set(gca,'UIContextMenu',cmenu);            set(a,'UIContextMenu',cmenu);            return;        end           PlotDuplicates(F, id, CellGroups);       else           PC.PlotXcorr(a,b,pos(1,1),pos(1,2));       end                function PlotDuplicates(DATA, xid, CellGroups)      if isfigure(DATA)          DupF = DATA;          DATA = GetDataFromFig(DupF);      else          DupF = DATA.toplevel;      end       xcorrs = getappdata(DATA.toplevel,'xcorrs');       cells = getappdata(DATA.toplevel,'xcCellList');       D = getappdata(DATA.toplevel,'duplicates');       if isfield(CellGroups,'xcorrs')           xcorrs = CellGroups.xcorrs;       end       if isfield(CellGroups,'cells')           cells = CellGroups.cells;       end       if isempty(D)           duplicates = [];       else           duplicates = D.probes;       end       probes = [cells.p] + [cells.cl]/10;       p = xcorrs(xid).p;       xprobes = cat(1,xcorrs.p);       if isfield(xcorrs(xid),'efficacy')           str = ['Eff' sprintf(' %.3f',xcorrs(xid).efficacy)];       else           str = '';       end      fprintf('P%.1f->%.1f%s\n',xcorrs(xid).probe,str);%Find all duplicate sets that either probe belongs too      if ~isempty(CellGroups)      gid = find(cellmember(xcorrs(xid).p,CellGroups.groups) ==2);      nd = 0;      dupset = {};      for j = 1:length(duplicates)          if sum(ismember(p,duplicates{j}))              if nd == 0                  nd = 1;                  dupset{nd} = duplicates{j};                  fprintf('%s Best %.1f\n',sprintf('%.1f ',probes(duplicates{j})),probes(D.best(j)));              end              if ~isempty(setdiff(duplicates{j},cat(1,dupset{:})))                  nd = nd+1;                  dupset{nd} = duplicates{j};                  fprintf('%s Best %.1f\n',sprintf('%.1f ',probes(duplicates{j})),probes(D.best(j)));              end          end      end udup = unique(cat(1,dupset{:})); pairs = udup; NewGroups.cells = CellGroups.cells(pairs);      else          dupset = [];      end F = PC.SetFigure(DATA, DATA.tag.xcorr); Clusters = PC.GetValue(DATA,'Clusters'); if isempty(dupset) || isempty(gid) || diff(xcorrs(xid).p) ~= 0 %no duplicates for this square, and off diagonal     PC.PlotXcorr(DupF,DATA.plot.xcorrtype,'xcorrfine', xid);     subplot(2,2,1);     C = PC.GetClusterInfo(Clusters,CellGroups.cells(xcorrs(xid).p));     PC.CompareSpikeShape(C,'bestdelay','legendloc','BottomOutside');     [e, xd] = clust.Efficacy(C);     return; end hold off;  plottype = 2; for j = 1:length(pairs)     labels{j} = sprintf('%d.%d',cells(pairs(j)).p,cells(pairs(j)).cl);     for k = 1:(j-1)         id = find(xprobes(:,1) == pairs(j) & xprobes(:,2) == pairs(k));         eIm(j,k) = xcorrs(id).efficacy(1);         eIm(k,j) = xcorrs(id).efficacy(2);         sIm(j,k) = xcorrs(id).shapexc;         sIm(k,j) = xcorrs(id).shapexc;         if plottype == 1             mysubplot(2,1,1);             plot(xcorrs(id).shapexc,max(xcorrs(id).efficacy(1:2)),'o');             hold on;         end     end     sIm(j,j) = 0;     if plottype ==1         mysubplot(2,1,2);         plot(cells(pairs(j)).dp,cells(pairs(j)).dropi,'o');         hold on;     end end      if plottype == 2;     mysubplot(1,2,1);     hold off;     [X, score, pid] = squishDistanceMatrix(eIm,'min','laps',1);     imagesc(X, 'buttondownfcn',{@ImageHit,'paireffic'});     NewGroups.order = pid;     gl = minmax(find(ismember(pairs(pid),CellGroups.groups{gid(1)})));      xlabels = labels(pid);     set(gca,'ytick',1:length(labels),'yticklabel',xlabels);     set(gca,'xtick',1:length(labels),'xticklabel',xlabels);     title('Efficacy');     fprintf('D%.3f after %d',score(1),score(3));%Anywhere there is nothing on the diagonal 2 away from the center, it%sugests a different grouping     diaga(1) = 1;     len = size(X,1);     for j = 1:size(X,1)         C = NewGroups.cells(pid(j));         if j > 1             diaga(j) = min([X(j,j-1) X(j-1,j)]);         end         if C.cell > 0             text(j,j,sprintf('Cell %d',C.cell),'color','w',...                 'horizontalalignment','center','verticalalignment','middle');         end         for k = 1:size(X,1)             Cb = NewGroups.cells(pid(k));             if k ~= j                 text(k,j,sprintf('%d->%d:%.3f',C.cell,Cb.cell,X(j,k)),'color','w',...                     'horizontalalignment','center','verticalalignment','middle');             end         end     end     breaks = diaga < prctile(diaga,50)/2;%     breaks = find(breaks);     a = find(diff(breaks)>0);         b = find(diff(breaks)<0);         hold on;     if isempty(a)         ix = 1;     else         ix = a(1);     end     for j = 2:length(a)         groups{j-1} = ix:a(j);         PC.DrawBox([ix a(j)],[ix a(j)],'duplicates');         ix = a(j)+1;     end     if breaks(end) == 0 && ~isempty(a)         PC.DrawBox([a(end)+1 len],[a(end)+1 len],'duplicates');     end     PC.DrawBox([gl],[gl],'duplicates','color','y');             sIm = RemapSquareMatrix(sIm, pid);              mysubplot(1,2,2);     imagesc(sIm, 'buttondownfcn',{@ImageHit,'paireffic'});     for j = 1:length(pid)         for k = 1:j-1             text(k,j,sprintf('%.2f',sIm(j,k)),'color','w');         end     end     set(gca,'ytick',1:length(labels),'yticklabel',xlabels);     set(gca,'xtick',1:length(labels),'xticklabel',xlabels);     setappdata(F,'CellGroups',NewGroups);     gid = find(cellmember(p,CellGroups.groups));     if length(gid) ==1      gid = CellGroups.groups{gid};     end     title('Shape Crosscorr');     PC.SetFigure(DATA,DATA.tag.misc);     hold off;     udup = union(udup,gid);     k = 0;     for j = 1:length(udup)         C = cells(udup(j));         x = cells(udup(j)).dp;         y = cells(udup(j)).dropi;         if ismember(udup(j), gid)             k = k+1;             h = plot(x,y,'o','markerfacecolor',DATA.colors{k});         else             h = plot(x,y,'o');         end         set(h,'buttondownfcn',{@DuplicateHit, C});         h = text(x,y,sprintf('%d/%d',C.p,C.cl),'horizontalalignment','left','verticalalignment','bottom');         hold on;     end     xlabel('Cluster Separation');     ylabel('Drop Index'); end if diff(p) == 0 %hit diagonal     eid = find(DATA.CellDetails.exptids == DATA.currentexpt,1);     PC.ShowData(DATA, eid, cells(p(1)).p); end      function DuplicateHit(a,b,cell)      DATA = GetDataFromFig(a);           function [groups, selfgroups] = GroupDuplicates(DATA, xid, varargin)     xcorrs = [];     D = [];     ts = now;j = 1;while j <= length(varargin)    if isfield(varargin{j},'xcorrs')        X = varargin{j};        xcorrs = X.xcorrs;        cells = X.cells;    elseif isfield(varargin{j},'probes') && iscell(varargin{j}.probes)        D = varargin{j};    end    j = j+1;endif isempty(xcorrs)     xcorrs = getappdata(DATA.toplevel,'xcorrs');     cells = getappdata(DATA.toplevel,'xcCellList');endif isempty(D)     D = getappdata(DATA.toplevel,'duplicates');end          duplicates = D.probes;     probes = [cells.p] + [cells.cl]/10;     p = unique(cat(1,xcorrs(xid).p));     p = xid;  %index is to cells, not xcorrs     xprobes = cat(1,xcorrs.p);           nd = 0;     for j = 1:length(duplicates)         if sum(ismember(p,duplicates{j}))             if nd == 0                 nd = 1;                 dupset{nd} = duplicates{j};             end             if ~isempty(setdiff(duplicates{j},cat(1,dupset{:})))                 nd = nd+1;                 dupset{nd} = duplicates{j};             end         end     end      pairs = unique(cat(1,dupset{:}));          for j = 1:length(pairs)         labels{j} = sprintf('%.1f',probes(pairs(j)));     for k = 1:(j-1)         id = find(xprobes(:,1) == pairs(j) & xprobes(:,2) == pairs(k));         eIm(j,k) = xcorrs(id).efficacy(5);         eIm(k,j) = xcorrs(id).efficacy(6);         sIm(j,k) = xcorrs(id).shapexc;         sIm(k,j) = xcorrs(id).shapexc;     end     sIm(j,j) = 0;     end      [X, score, pid] = squishDistanceMatrix(eIm,'min','laps',1);      sIm = RemapSquareMatrix(sIm, pid);%Anywhere there is nothing on the diagonal 2 away from the center, it%sugests a different grouping     diaga(1) = 1;     len = size(X,1);     for j = 2:size(X,1)         diaga(j) = min([X(j,j-1) X(j-1,j)]);     end     [igroups, details] = GroupByOverlap(X); %Check if the same probe appears twice in a group.  This %leads to trouble, especiall with automatic list building %can happen if they are re-triggers so that peak is a few samples off %so check for real synchronh selfgroups = {};     for j = 1:length(igroups)        gp = probes(pairs(pid(igroups{j})));        gcells = cells(pairs(pid(igroups{j}))); %cell structs for elements of this group in order        Xi = X(igroups{j},igroups{j}); %matrix for this group        Si = sIm(igroups{j},igroups{j});         if length(unique(floor(gp))) < length(gp)            [a,b] = Counts(floor(gp));            bp = b(a>1);            id = find(floor(gp) ==bp);            xc = [Xi(id(1),id(2)) Xi(id(2),id(1))];            nx = setdiff(1:length(igroups{j}),id);            selfgroups{end+1}.cellid = pairs(pid(igroups{j}(id)));            if max(xc) < 0.5 %not real duplicates, one has to leave group                for k = 1:length(id)                    scores(:,k) = [Xi(id(k),nx) Xi(nx,id(k))'];                    shapescores(:,k) = [Si(id(k),nx) Si(nx,id(k))'];                end                dscores = diff(scores,[],2);                [~, bad] = min(mean(scores));                xid = find(sign(dscores(:,1))  ~= sign(diff(mean(scores))));                rate(1) = mean([gcells(nx).nspk]);                [~,ratebad] = max(abs([gcells(id).nspk] - rate(1)));                if length(xid) < 2 %remove id(bad) from the list                    igroups{j} = setdiff(igroups{j},id(bad));                    igroups{end+1} = id(bad);                    selfgroups{end}.bad = bad;                    if ratebad ~= bad %estimate from rates does not match                        fprintf('Double Duplicate on E%dP%.1f and %.1f corr and rate suggest different resolution\n',xe(1),gp(id(1)),gp(id(2)))                        selfgroups.ratebad = bad;                    end                else                    xe = unique([cells.eid]);                    fprintf('Hard to resolve Double Duplicate on E%dP%.1f and %.1f\n',xe(1),gp(id(1)),gp(id(2)))                    selfgroups{end}.score = scores;                end            end        end     end          groups = {};     for j = 1:length(igroups)         groups{j} = pairs(pid(igroups{j}));     end          fprintf('%d Groups   ',length(groups));     for j = 1:length(groups)         id = groups{j};         bid = id(find(ismember(id,D.best)));         if ~isempty(bid)             bstr = sprintf('Best%s.',sprintf(' %d',bid));         else             bstr = 'NoBest';         end         fprintf('   %d: %s(%s)%s\n',j,sprintf(' %.1f',probes(id)),sprintf(' %.0f',id),bstr);     end     fprintf('Took %.2f at %s\n',mytoc(ts),datestr(now));          hold off;     imagesc(X);     caxis([0 1]);     xlabels = labels(pid);     set(gca,'ytick',1:length(labels),'yticklabel',xlabels);     set(gca,'xtick',1:length(labels),'xticklabel',xlabels);     hold on;     for j = 1:length(igroups)         PC.DrawBox([min(igroups{j}) max(igroups{j})],[min(igroups{j}) max(igroups{j})],{@HitImage});     end     drawnow;  function SetDuplicateMenu(a,b,fcn, varargin)      DATA = GetDataFromFig(a);        F = GetFigure(a);       cells = getappdata(DATA.toplevel,'xcCellList');       xcorrs = getappdata(DATA.toplevel,'xcorrs');       if isappdata(F,'CellGroups')           CellGroups = getappdata(F,'CellGroups');       end       fprintf('Called Dup Menu\n');       eid = DATA.currentpoint(1);       if sum(strcmp(fcn,{'setinteractive' 'noninteractive'}))           for j = 1:length(CellGroups.groups)                              G = CellGroups.groups{j};               if length(G) > 1               cellid = CellGroups.cellid(G);               cellid = G(cellid > 0);               if isempty(cellid)                   cellid = BestCell(cells,G);                   cellno = 100;               elseif length(cellid) > 1                   cellid = BestCell(cells,cellid);                   cellno = CellGroups.cellid(cellid);               else                   cellno = CellGroups.cellid(cellid);               end               dup = setdiff(G,cellid);               s = sprintf('Cell%d on %d/%d. Duplicates%s',cellno,...                   cells(cellid).p,cells(cellid).cl,sprintf('%d/%d ',[cells(dup).p],[cells(dup).cl]));               if strcmp(fcn,'setinteractive')                   if cellno == 100                       s = sprintf('No cell in group. Best probe is %d/%d. Duplicates%s. Set Cell to 100? ',...                           cells(cellid).p,cells(cellid).cl,sprintf('%d/%d ',[cells(dup).p],[cells(dup).cl]));                       yn = questdlg(s);                   else                       yn = questdlg([s '. Apply To CellList?']);                   end               else                   if cellno == 100                       fprintf('No Cell in Group %s. Setting all to duplicates of 100\n',sprintf('%d/%d ',[cells(G).p],[cells(G).cl]));                   else                       fprintf('Applying %s to CellList\n',s);                   end                   yn = 'Yes';               end               if strcmp(yn,'Yes')                   for j = 1:length(dup)                       C= cells(dup(j));                       DATA.CellList(eid,C.p,C.cl) = -cellno;                   end                   C= cells(cellid);                   if cellno == 100 && strcmp(fcn,'noninteractive')                       DATA.CellList(eid,C.p,C.cl) = -100;                   else                       DATA.CellList(eid,C.p,C.cl) = cellno;                   end               end               end           end           DATA = PC.SaveCellList(DATA,'backup');           set(DATA.toplevel,'UserData',DATA);       elseif strcmp(fcn,'allexpts')           [C, DATA] = PC.CheckClusterLoaded(DATA, 1:length(DATA.exptid));           DATA.options.efficonly = 1;           DATA.plot.xcorrpoptype = 'duplicates';           ts = now;           AllGroups = {};           for j = 1:length(DATA.exptid)               te = now;               Clusters = C{j};               cells = PC.ClusterList(DATA, Clusters);               DATA.currentpoint(1) = j;               PC.SetFigure(DATA,DATA.tag.xcorr);               fprintf('Calculating Efficacies for Expt %d at %s. Taken %.1f sec\n',DATA.exptid(j),datestr(now),mytoc(ts));               [allcells{j}, allxcorrs{j}] = PlotAllXcorr(DATA, Clusters,cells,'callback',@PC.PlotXcorr, 'efficonly');               AllGroups{j} = PlotExptDuplicates(DATA,'figtag',['Duplicates' num2str(j)]);               AllGroups{j}.cellstruc = allcells{j};               AllGroups{j}.xcorrs = allxcorrs{j};               AllGroups{j}.dur = mytoc(te);           end                      fprintf('All Expt Duplicates Took %.1f\n',mytoc(ts));           setappdata(DATA.toplevel,'AllGroups',AllGroups);       end  function SetDuplicateGUI(a,b,fcn, varargin)      DATA = GetDataFromFig(a);        F = GetFigure(a);       pos = round(get(gca,'currentpoint'));       cells = getappdata(DATA.toplevel,'xcCellList');       xcorrs = getappdata(DATA.toplevel,'xcorrs');       if isappdata(F,'CellGroups')           CellGroups = getappdata(F,'CellGroups');           if isfield(CellGroups,'xcorrs')               xcorrs = CellGroups.xcorrs;           end           if isfield(CellGroups,'cells')               cells = CellGroups.cells;           end       end       cid(1) = pos(1,1);       cid(2) = pos(1,2);       if isappdata(F,'CellGroups')           CellGroups = getappdata(F,'CellGroups');           cid = CellGroups.order(cid);           if isfield(CellGroups,'cells')               cells = CellGroups.cells;           end       end       pid = cat(1,xcorrs.p);       aid = find(pid(:,1) == cid(1) & pid(:,2) == cid(2));       bid = find(pid(:,2) == cid(1) & pid(:,1) == cid(2));       id = unique([aid bid]);       ex = find(DATA.CellDetails.exptids == DATA.exptno, 1);       if strcmp(fcn,'showspikes')           PC.SetFigure(DATA,DATA.tag.allspikes);           subplot(1,1,1);           PC.PlotSyncSpikes(DATA, DATA.currentpoint(1), floor(xcorrs(id).probe), round(rem(xcorrs(id).probe .*10,10)));       elseif strcmp(fcn,'comparequickspikes')           PC.CompareQuickSpks(DATA,xcorrs(id));       elseif strcmp(fcn,'showgroupspikes')           gid = find(cellmember(cid,CellGroups.groups));           G = CellGroups.groups{gid};           PC.SetFigure(DATA,DATA.tag.allspikes,'front');           ClearPlot;           [probes, pid] = unique([cells(G).p]);           for j = 1:length(probes)               mysubplot(1,length(probes),j);               cl = cells(G(pid(j))).cl;               PC.QuickSpikes(DATA, [DATA.currentpoint(1) probes(j)],'labelpos','left');               h = title(sprintf('P%dC%d',probes(j),cl));               set(h,'color',DATA.colors{1+cl});           end       elseif sum(strcmp(fcn,{'comparemeanspikes' 'comparemeanimage'} ))           pos = PC.MakeTriplet(CellGroups,id);           A = PC.GetClusterInfo(DATA,pos);           [xc, details] = PC.ShapeCorr(A,'delays',5); %allow time shift, but not probe drift           GetFigure('CompareShape','parent',DATA.toplevel,'front');           if strcmp(fcn,'comparemeanimage')               PC.CompareSpikeShape(A,'image','xstring',sprintf('xc%.2f',xc));           else               subplot(1,1,1);               PC.CompareSpikeShape(A);           end           fprintf('ShapeXC %.2f\n',CellGroups.xcorrs(id).shapexc)                  elseif strcmp(fcn,'showgroupmeanspike')           gid = find(cellmember(cid,CellGroups.groups));           G = CellGroups.groups{gid};           PC.SetFigure(DATA,DATA.tag.allspikes);           ClearPlot;           [probes, pid] = unique([cells(G).p]);           for j = 1:length(probes)               mysubplot(1,length(probes),j);               cl = cells(G(pid(j))).cl;               PC.PlotMeanSpike(DATA, [CellGroups.expt probes(j)],cl,'imageonly');               h = title(sprintf('P%dC%d',probes(j),cl));               set(h,'color',DATA.colors{1+cl});           end       elseif strcmp(fcn,'setduplicates')           cellid = varargin{1};           cid = varargin{2};           gid = find(cellmember(cid,CellGroups.groups));           G = CellGroups.groups{gid(1)};           ex = find(DATA.CellDetails.exptids == CellGroups.expt);           dup = setdiff(G,cid);           for j = 1:length(dup)               C= cells(dup(j));               DATA.CellList(ex,C.p,C.cl) = -cellid;           end           C= cells(cid(1));           DATA.CellList(ex,C.p,C.cl) = cellid;                PC.PlotCellList(DATA);           DATA = PC.SaveCellList(DATA,'backup');           SetData(DATA);       elseif strcmp(fcn,'showxcorr')           Clusters = getappdata(DATA.toplevel,'Clusters');           gid = find(cellmember(cid,CellGroups.groups));           G = CellGroups.groups{gid};           PC.SetFigure(DATA,DATA.tag.xcorr);           ClearPlot;           probes = [cells(G).p];       elseif strcmp(fcn,'showgroupxcorr')           Clusters = getappdata(DATA.toplevel,'Clusters');           gid = find(cellmember(cid,CellGroups.groups));           G = CellGroups.groups{gid};           PC.SetFigure(DATA,DATA.tag.xcorr);           ClearPlot;           probes = [cells(G).p];           clid = [cells(G).cl];;           np = length(probes);           for j = 2:np               for k = 1:j-1;                    P = PC.GetClusterInfo(Clusters, ex, probes(j),clid(j),'allexpt');                   Q = PC.GetClusterInfo(Clusters, ex, probes(k),clid(k),'allexpt');                   xc = xcorrtimes(P.times,Q.times);                   mysubplot(np-1,np-1,(j-1) + (k-1)*(np-1));                   plot(xc);                   set(gca,'xtick',[],'ytick',[]);                   h = title(sprintf('%d.%d vs %d.%d',probes(j),clid(j),probes(k),clid(k)));                   set(h,'verticalalignment','top');               end           end                  end  function AutoFixDupicates(DATA, eid)             DATA.currentpoint(1) = eid;       F = GetFigure(DATA.tag.xcorrpop);      G = getappdata(F,'CellGroups');      cells = getappdata(DATA.toplevel,'xcCellList');      for j = 1:length(CellGroups.groups)          cellid = G.cells(G.groups{j});          cellid = cellid(cellid > 0);          if isempty(cellid)              p = BestCell(cells,G.groups{j});          elseif length(cellid) > 1              cellid = BestCell(cells,cellid);                        end          cellno = G.cells(cellid);          dup = setdiff(G.groups{j},cellid);          for j = 1:length(dup)              C= cells(dup(j));              DATA.CellList(eid,C.p,C.cl) = -cellno;          end          C= cells(cellid);          DATA.CellList(eid,C.p,C.cl) = cellno;      end        function best = BestCell(cells, ix)  % best = BestCell(cells, ix) given a group of clusters, find one wih best isolation  %cells is a strcut with dp and dropi, as used in PlotXcorrAll        d = [cells(ix).dp];        d(d < 0) = 0;        [dp, dpi] = sort(d);        [drops, dropi] = sort([cells(ix).dropi]);        [a,b] = sort(d .* [cells(ix).dropi]);        best = ix(b(end));             function UG = SubsumeGroups(G)%identify cases where one group contains another        UG{1} = G{1};    for j = 2:length(G)        subset = 0;        for k = 1:length(UG)            ni = length(intersect(G{j},UG{k}));            if ni == min([length(UG{k}) length(G{j})]) %one is completely contained                [~,subset] = max([length(UG{k}) length(G{j})]);                if subset == 2 %G is longer than UG                    subsets(k) = j;                    UG{k} = G{j};                else                    subsets(j) = k;                end            elseif (ni+1) == min([length(UG{k}) length(G{j})]) && ni > 1%same except for 1            [~,subset] = max([length(UG{k}) length(G{j})]);                if subset == 2 %G is longer than UG                    subsets(k) = j;                    UG{k} = G{j};                else                    subsets(j) = k;                end            end        end        if ~subset            UG{end+1} = G{j};        end    end    subset = 0;     function [UG, gid] = uniquegroups(G)        UG{1} = G{1};        gid(1) = 1;         for j = 2:length(G)             old = 0;             for k = 1:length(UG)                 if sum(ismember(G{j},UG{k})) == length(UG{k})                     old = 1;                 end             end             if ~old                 UG{end+1} = G{j};                 gid(end+1) = j;             end         endfunction [UG, gid] = CombineGroups(G)%if there are elements common to different Groups in G, combine into onegood = ones(1,length(G));for j = 1:length(G)    for k = 1:j-1        if sum(ismember(G{j},G{k}))            G{j} = union(G{j},G{k});            G{k} = [];            good(k) = 0;        end    endendgid = find(good);UG = G(gid);