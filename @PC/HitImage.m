function HitImage(src,b, type, varargin)% PC.HitImage(src,b, type, varargin) select expt/probe%PC.HitImage(fig,[e p]) to set manually%PC.HitImage(fig,[e p cl]) ts = now;DATA = GetDataFromFig(src);listtype = PC.GetValue(DATA,'listtype');if DATA.profiling    fprintf('Get took %.3f\n',mytoc(ts));endif nargin < 3    type = 'none';endj = 1;while j <= length(varargin)    if strcmp(varargin{j},'autolist')        listtype = 'autolist';    end    j = j+1;endDATA.ts = ts;if isfigure(src)    ax = gca;        else    ax = get(src,'Parent');endif ~isempty(b) && isnumeric(b) %force selection    ex = b(1);    p = b(2);    if length(b) > 2        setcl = b(3);    else        setcl = 1;    end    clear b;    b.EventName = 'Manual';    srcdata = [];    l = [];else    xy = get(ax,'currentpoint');    srctype = get(src,'type');    srcdata = get(src,'UserData');    l = get(ax,'Children');    tag = get(get(ax,'Parent'),'Tag');    ex = round(xy(1,2));    p = round(xy(1,1));    if ex <0 || ex > length(DATA.exptlist) %outside image        return;    end    if xy(1,1) > p        setcl = 2;    else        setcl = 1;    endendif isempty(b) %older matlab    if strcmp(type,'down')        b.EventName = 'WindowMousePress';    else        b.EventName = 'WindowMouseRelease';    endendbt = strmatch(get(gcf,'SelectionType'),{'normal' 'alternate'  'extend'  'open'});if strcmp(b.EventName,'Hit')    fprintf('Event Type Hit!! input type %s\n',type);endX = gui.MouseEvent(src, b);if sum(strcmp(b.EventName, {'WindowMousePress' 'FirstHit'}))%'Hit' events seem to happen when a press is made before the processing%assoiated with the last press is over %   X.h = PC.DrawBox(ex,p,listtype,'color','w');    X.eid = ex;    X.p = p;    setappdata(gcbf,'MouseState',X);    if DATA.profiling        fprintf('Mouse Hit:%s\n',X.SelectionType);        DATA.MouseData{end+1} = X;    end    SetData(DATA);    return;endif sum(strcmp(b.EventName, {'WindowMouseRelease' 'Hit'}))    [X.swipe, details] = gui.MouseSwipe(X);    if DATA.profiling > 2        gui.MouseSwipe(X,'history');        fprintf('Released at %d,%d (bt%d)\n',ex,p,bt);    end    if DATA.profiling    if DATA.MouseData{end}.down %fort trackng event history        DATA.MouseData{end} = X;    else        X.down = -1;        DATA.MouseData{end+1} = X;    end    end    if X.swipe > 0        if DATA.profiling            fprintf('Swipe %s\n',X.swipe);        end        PC.NextButton(DATA,[], X.swipe);        return;    elseif DATA.profiling        fprintf('Event is %s, bt is %d\n',b.EventName,bt);    end    if X.dur > 1 && bt > 1 %slow drag is not really a R click        fprintf('Not Really a R click\n');        bt = 1;    end    if bt == 4 %'open' selection    endelseif DATA.profiling    fprintf('Event is %s\n',b.EventName);endif isfield(srcdata,'cell')    fprintf('Hit Line for cell %d\n',srcdata.cell);    if ~isfield(srcdata,'label') && isfield(srcdata,'start')        srcdata.label = text(srcdata.start(2)+srcdata.start(3)/10,srcdata.start(1),sprintf('%d',srcdata.cell),...            'verticalalignment','bottom','horizontalalignment','center','color',get(src,'color'));        set(src,'UserData',srcdata);    endendif strcmp(type,'lineplot')    exy = FindNearestPoint(src, xy);    setcl = round(rem(exy(1),1).*10);end%detect if only working on autoclustersif strcmp(type,'autolist') || strcmp(listtype,'autolist')    if isfield(DATA,'autolist')        CellList = DATA.autolist.CellList;    end    Clusters = getappdata(DATA.toplevel,'AutoClusters');    listtype = 'autolist';    if ~isfield(DATA,'selectautoprobe')        DATA.selectautoprobe = DATA.selectprobe;    endelse    CellList = DATA.CellList;    [Clusters, DATA] = PC.CheckClusterLoaded(DATA, ex);    listtype = 'normal';endif size(DATA.selectprobe,1) < size(CellList,1) || size(DATA.selectprobe,2) < size(CellList,2)    DATA.selectprobe(size(CellList,1),size(CellList,2)) = 0;    DATA.selectautoprobe(size(CellList,1),size(CellList,2)) = 0;endif ex > size(CellList,1)    ex = size(CellList,1);endDATA = PC.CheckCellList(DATA,ex, p);DATA.currentrow = ex;if DATA.profiling    fprintf('ClusterLoad Took %.2f\n',mytoc(DATA.ts));end%the celllist plot may have rows that are not in DATA.exptid %if the clustertimes could not be loaded%eid is index in Clusters. ex is row in plot%type 1 means real expt list,  else rows in plotexid = PC.GetExptid(DATA, ex,listtype);if type == 1    eid = ex;else        eid = exid{1};    endDATA.exptno = DATA.exptid(exid{3});F = GetFigure(src);if ~iscluster(Clusters,exid{3},p) %error loading    fprintf('No Cluster Times for E%d\n',eid);    return; endzval = NaN;for j = 1:length(l)    if ishandle(l(j)) %can be a deleted object!!    a = get(l(j));    if isfield(a,'CData')        Z = get(l(j),'CData');        zval = Z(ex,p);    end    endend    cmenu = get(src,'UIContextMenu');    if isempty(cmenu)        cmenu = get(gca,'UIContextMenu');    end            axdata = get(gca,'UserData');offset = DATA.clusteroffset;cntrl_is_down = getappdata(0,'control_is_down');if cntrl_is_down    if strcmp(type,'autolist')        if DATA.selectautoprobe(ex,p) ==0            DATA.selectautoprobe(ex,p) = DATA.currentcluster;        else            DATA.selectautoprobe(ex,p) = 0;        end        DATA.selecth = PC.DrawBoxes(DATA, 'autolist','clear','autolist');    else        DATA.selectprobe(ex,p) = ~DATA.selectprobe(ex,p);        PC.DrawBoxes(DATA, 3);    end    DATA.selectprobe(ex,p) = ~DATA.selectprobe(ex,p);    bt =4;elseif bt == 2    c = get(cmenu,'children');    tid = find( strcmp('Title',get(c,'Tag')));    [a,b,cl] = PC.isacell(DATA,ex,p);    if a        cid = find(cl == setcl+offset);        if isempty(cid) && setcl+offset > max(cl)            cid = max(cl); %if hit on 2 but only 1 is defined as a cell            thiscell = 0;            if DATA.nclusters(ex,p) >= setcl+offset                cid = setcl+offset;            end        else            thiscell = b(cid);            cid = cl(cid);        end        if length(b) == 1            set(c(tid),'Label',sprintf('E%dP%d Cell %d',ex,p,b));            if length(cid) == 1                set(c(tid),'foregroundcolor',DATA.colors{cid+1});            end        elseif length(cid) == 1 && cid <= length(b)            othercell = setdiff(b,thiscell);            set(c(tid),'Label',sprintf('E%dP%d Cell %d (%s)',ex,p,b(cid),sprintf('%d ',othercell)));            set(c(tid),'foregroundcolor',DATA.colors{cid+1});        else            set(c(tid),'Label',sprintf('E%dP%d Cells%s',ex,p,sprintf('%d ',b)));            if length(cid) == 1                set(c(tid),'foregroundcolor',DATA.colors{cid+1});            end        end    else        if strcmp(type,'autolist')            DATA.selectautoprobe(DATA.selectautoprobe > 0) = 0;            DATA.selectautoprobe(ex,p) = DATA.currentcluster;            DATA.selectprobe(ex,p) = DATA.currentcluster;        end        if setcl+offset > DATA.nclusters(ex,p)            cid = DATA.nclusters(ex,p);        else            cid = setcl+offset;        end        if cid <= 0            cid = 1;        end        d = PC.isduplicate(DATA,ex,p,cid,listtype);        if sum(DATA.selectprobe(:)) > 1            str = [' +' num2str(sum(DATA.selectprobe(:)))];        else            str = '';        end        if d > 0            set(c(tid),'Label',sprintf('E%dP%d Dup%d%s',ex,p,d,str));        else            set(c(tid),'Label',sprintf('E%dP%d%s',ex,p,str));        end    end    axdata.eid = ex;    axdata.probe = p;    axdata.toplevel = DATA.toplevel;    axdata.clnum = cid;    set(gca,'userdata',axdata);    return;elseif bt == 3 %shift press ???  used to workelseif bt ==1 %normal press    if strcmp(listtype,'autolist')        DATA.selectautoprobe(DATA.selectautoprobe>0) = 0;        DATA.selectautoprobe(ex,p) = DATA.currentcluster(1);        fprintf('Selecting Auto Cluster %d(%d)\n',DATA.currentcluster(1),setcl);    endendif strcmp(type,'CellRates')    DATA.markexpts = DATA.expnames{ex};    DATA.currentcell = p;    fprintf('E%dC%d',ex,p);    fprintf('Hit %.0f,%.0f %.3f %d\n',ex,p,zval,bt);    PC.PlotMenu(DATA, [], 'cells', 'rateseqone');    return;endfprintf('Hit %.0f,%.0f %.3f type %s,%d event %s\n',ex,p,zval,type,bt,b.EventName);%If not cutting clusters, then set currentcluster to match hit%nclusters is by row, not by exptif DATA.nclusters(ex,p) >= setcl    DATA.currentcluster = setcl;endif isempty(Clusters) || DATA.show.cellsummary    PC.DrawBox(ex, p,3,'color','w');    PC.PlotCellSummary(DATA, ex, p);    return;endC = PC.GetClusterInfo(Clusters, [exid{3} p 1]);if ~isfield(C,'clst')    cprintf('red','No clst For E%dP%d\n',ex,p);    return;endif strcmp(type,'duplicates')    A = getappdata(DATA.toplevel,'AllDuplicates');    G = A{ex};    if isfield(G,'groups')        pid = find(floor(G.probes) == p);        gid = find(cellmember(pid,G.groups));        cells = cat(1,G.groups{gid});        if length(cells) > 1            PC.PlotXcorr(DATA,[],cells,G.cells);                        DATA.currentexpt = DATA.CellDetails.exptids(ex);            PC.ReplotXcorrs(DATA,[],DATA.plot.xcorrpoptype,A{ex});        end        set(0,'currentfig',F);        return;    endelseif strcmp(type,'autolist')%    DATA.plot.autocompare = 1; %don't need this now autolist propagates    if bt == 3           DATA = SetMultipleSelection(DATA,ex,p);    end    if isfield(DATA,'currentsquare') && DATA.currentsquare(2) == ex && DATA.currentsquare(3) == p        DATA.currentsquare(1) = DATA.currentsquare(1)+1;    end    if CellList(ex,p,DATA.currentcluster) > 0        DATA.currentcell = CellList(ex,p,DATA.currentcluster);    endelseif ismember(type, [1 3]) % 3 = hit cell image - set cell#        if DATA.datatype == 2 % this will need fixing for new cluster struct        C = Clusters{exid{3}}{p}.cluster{DATA.templatesrc};    end    nc = Counts(C.clst);    nstr = sprintf(' %d',nc);    if isfield(C,'manual')        xstr  = sprintf('Man:%d',C.manual);    else        xstr = [];    end    fprintf('P%d E%.0f cut on %s:%s spks %s\n',p,C.exptno,datestr(C.ctime),nstr,xstr);    if type == 3        cex = ex;       it = findobj(allchild(DATA.fig.celllist),'flat','Tag','CellNumberId');       if bt == 3           DATA = SetMultipleSelection(DATA,ex,p);           cells = squeeze(DATA.CellList(DATA.selectexpts,p,:));           if sum(cells(:));               [cex, clid] = find(cells>0);               cex = DATA.selectexpts(cex(1)); %for now just take fist cell that is in multiple selection           end       else           cells = CellList(ex,p,:);       end           cells = unique(cells(cells>0));       if ~isempty(cells)           lastcell = DATA.currentcell;           a = find(DATA.CellList(cex,p,:) > 0);           id = a(a > offset & a <= offset+2);           if setcl == 2 & length(id) == 2               id = id(2);           elseif isempty(id)               id = offset+setcl;           else               id = id(1);           end           DATA.cellcluster = id;           DATA.currentcluster = id;           DATA.currentcell = DATA.CellList(cex,p,id);           if DATA.currentcell == 0               DATA.currentcell = lastcell;           end           set(it,'value',DATA.currentcell);% seems wrong - this returns cell number gui, not cluster gui           %           [~, cit] = PC.GetCurrentCell(DATA);%           set(cit,'value',id);           cit = findobj(allchild(DATA.fig.celllist),'flat','Tag','ClusterModifier');           set(cit,'value',id);                      if lastcell ~= DATA.currentcell               PC.CellChanged(DATA)           end       end    endelseif type == 2    id = find(DATA.AllPairs(:,1) == ex & DATA.AllPairs(:,2) == p);    if length(id)    xc = PC.meanccf(DATA, id, ex, p);    dist(1) = PC.meanmahal(DATA, id, ex);    dist(2) = PC.meanmahal(DATA, id, p);    PC.SetFigure(DATA,DATA.tag.onecell);    plot(xc);    title(sprintf('Expts %s mahal P%d %.2f, P%d %.2f',num2str(DATA.allexpt(id)),ex,dist(1),p,dist(2)));    end    set(gca,'ylim',[0 max(xc)]);    PC.SetFigure(DATA,DATA.tag.spkmean);    subplot(1,2,1);    ms = PC.MeanSpike(DATA, DATA.allexpt(id), p);    imagesc(ms);    subplot(1,2,2);    ms = PC.MeanSpike(DATA, DATA.allexpt(id), ex);    imagesc(ms);    C = Clusters{DATA.allexpt(id(1))}{p};    ex= DATA.allexpt(id(1));endif DATA.profiling    fprintf('SelectA Took %.2f\n',mytoc(DATA.ts));endDATA.selectcluster(ex,p) = DATA.currentcluster;if bt == 3    if DATA.selecth > 0 & ishandle(DATA.selecth)        delete(DATA.selecth);    end    DATA = SetMultipleSelection(DATA,ex,p);    DATA.selecth = PC.DrawBox(DATA.selectexpts,DATA.proberange, 3);    if length(DATA.selectexpts) > 1            [a,b,cl] = PC.isacell(DATA,DATA.selectexpts,p);            b = b(b>0);                end    if strfind(get(gcf,'Tag'),'CellList')        set(DATA.selecth,'color','w');    endelseif bt == 4    DATA.selectprobe(ex,p) = 1;elseif bt == 2    DATA.selectprobe(ex,p) = ~DATA.selectprobe(ex,p);elseif type == 3 %celllist lost    DATA.selectprobe = zeros(length(Clusters),DATA.nprobes);    DATA.selectprobe(ex,p) = 1;    DATA.selectexpts = ex;endDATA.currentpoint(1) = ex; %row number, not expt numberDATA.currentpoint(2) = p;DATA.currentprobe = DATA.currentpoint(2);DATA.currentexpt = eid;if DATA.profiling    fprintf('Select Took %.2f\n',mytoc(DATA.ts));endDATA = PC.ShowData(DATA,ex,p,'oneprobe',listtype);if DATA.profiling    fprintf('Show Took %.2f\n',mytoc(DATA.ts));endif ismember(bt, [2 3]) && ~strcmp(DATA.plotexpttype,'none')    DATA.Expt = PC.PlotSelectedExpts(DATA,'default');endif DATA.profiling    fprintf('Took %.2f\n',mytoc(DATA.ts));endif nargout == 0    SetData(DATA);endfunction DATA = SetMultipleSelection(DATA,ex,p, cl)if nargin < 4    cl = 1;end    DATA.selectprobe = zeros(size(DATA.selectprobe));    if p > DATA.currentpoint(2)        DATA.proberange = DATA.currentpoint(2):p;    else        DATA.proberange = p:DATA.currentpoint(2);    end    if ex > DATA.currentpoint(1)        DATA.selectexpts = DATA.currentpoint(1):ex;    else        DATA.selectexpts = ex:DATA.currentpoint(1);    end    DATA.selectprobe(DATA.selectexpts,DATA.proberange) = 1;    DATA.selectautoprobe(DATA.selectexpts,DATA.proberange) = 1;