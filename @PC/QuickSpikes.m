function [h, details, Spks] = QuickSpikes(DATA, pos, varargin)%[h, details] = QuickSpikes(DATA, pos, varargin) Show subset of spike from%   ...,'showmean') plots mean waveform on top    oneprobeonly = 0;    scalebar = 1;    topcluster = 0;    autofiti = 1;    labelpos = 'right';    ylim = [];    xprobes = [];    voffset = [];    ispk = [];    setclst = [];    C = [];    if isempty(pos)        return;    end    if isfigure(DATA) %manual call        F = DATA;        clear DATA;        DATA = get(F,'UserData');    end    listtype = PC.GetValue(DATA,'listtype');    j = 1;    while j <= length(varargin)        if strncmp(varargin{j},'autolist',6)            listtype = 'autolist';        elseif strncmp(varargin{j},'clst',4)            j = j+1;            setclst = varargin{j};        elseif strncmp(varargin{j},'ispk',4)            j = j+1;            ispk = varargin{j};        elseif strncmp(varargin{j},'withprobe',6)            j = j+1;            xprobes = varargin{j};        elseif strncmp(varargin{j},'voffset',6)            j = j+1;            voffset = varargin{j};        elseif strncmp(varargin{j},'ylim',6)            j = j+1;            ylim = varargin{j};        elseif iscluster(varargin{j})            C = varargin{j};        end        j = j+1;    end    if isstruct(pos)        Spks = pos;        C = varargin{1};        if ~isempty(C)            e = find(DATA.exptid == floor(C.exptno));            o = 1+round(rem(C.exptno,1).*10);            if length(e) >= o                e = e(o);            else                e = e(1);            end            p = C.probe(1);            pos = [e p];        if size(C.MeanSpike.ms,1) == 1            mprobe = 1;        else            mprobe = p;        end        else            if isfield(DATA,'exptid')                e = DATA.exptid;                p = DATA.probe;            end            pos = [e p];        end        if ~isfield(Spks,'values')            return;        end        if isempty(xprobes)            setprobe = p;        else            setprobe = [p setdiff(xprobes,p)];        end        [DATA.voffset, ylim] = PC.SetVOffset(DATA, Spks, e, setprobe);    else        e = pos(1);        setcluster = round(rem(pos(2),1).*10); %in case        pos(2) = floor(pos(2));        p = pos(2);        [AllSpikes, Spks] = PC.AddSpikes(DATA, [], e, p, 'ifnew','allprobes',listtype);        if isempty(C)            C = PC.GetClusterInfo(DATA, [e p 1]);        end        if isfield(C,'trigset') && DATA.currentcluster > 1            k = GetCellValue(C.next,DATA.currentcluster-1,'triggerset');            if k > 0                Spks = Spks.trigset{k};            end        end        maxv = CellToMat(AllSpikes(e,:),'VRange');        DATA.voffset =  cumsum(cat(1,maxv(2:end,2), maxv(end,2))) - cumsum(maxv(:,1));        DATA.voffset = DATA.voffset * 0.7;        if isempty(xprobes)            setprobe = [p setdiff(C.chspk,p)];            [DATA.voffset, vylim]  = PC.SetVOffset(DATA, AllSpikes, e, setprobe);        else            setprobe = [p setdiff(xprobes,p)];            [DATA.voffset, vylim] = PC.SetVOffset(DATA, AllSpikes, e, setprobe);        end        if isempty(ylim) %not forced above            ylim = vylim;        end        mprobe = pos(2);    end    plotargs = {};showtitle = 1;    showmean = 0;    j = 1;    while j <= length(varargin)        if strncmpi(varargin{j},'autofit',6)            j = j+1;            autofiti = varargin{j};            if autofiti > length(C.autofits)                cprintf('blue','Only %d autofits\n',length(C.autofits));                return;            end            C.clst = C.autofits{autofiti}.clst;        elseif strncmpi(varargin{j},'oneprobe',8)            oneprobeonly = 1;            plotargs = {plotargs{:} varargin{j}};        elseif strncmpi(varargin{j},'ontop',5)            plotargs = {plotargs{:} varargin{j}};            topcluster = varargin{j+1};        elseif strncmpi(varargin{j},'scalebar',6)            j = j+1;            scalebar = varargin{j};        elseif strncmpi(varargin{j},'showmean',8)            showmean = 1;        elseif strncmpi(varargin{j},'labelpos',8)            plotargs = {plotargs{:} varargin{j} varargin{j+1}};            j = j+1;            labelpos = varargin{j};        else            plotargs = {plotargs{:} varargin{j}};        end        j = j+1;    end    details = [];    if ~isfield(Spks,'times') %will happen if this file is missing        h = 0;        return;    end    if isfield(Spks,'maxv') && strcmp(class(Spks(1).values),'int16')        for j = 1:length(Spks)        Spks(j).values = double(Spks(j).values) .* double(Spks(j).maxv./Spks(j).maxint);        end    end    nevents = length(Spks(1).times);    if nevents > 50000        nspks = 1000;    else        nspks = 500;    end        if isempty(ispk)        istep = max([1 round(nevents/nspks)]);        ispk = 1:istep:nevents;    end    if length(setclst) == nevents        Spks.codes(:,1) = setclst;    elseif ~isempty(C)        if nevents ~= length(C.clst)            cprintf('red','E%dP%d ',C.exptno,C.probe(1));            if Spks.Header.ctime < C.savetime(1)                cprintf('red','Spike File older than cluster, and mismatched count\n%s %d Spikes, %s %d Cluster times\n',...                    datestr(Spks.Header.ctime),nevents,datestr(C.savetime(1)),length(C.clst));                            else                cprintf('red','Mismatched Spike counts:%d Spikes, %d Cluster events\n',nevents,length(C.clst));            end            if nevents > length(C.clst) && isfield(C,'t')                [~,id] = intersect(Spks.times,C.t.*10000);                if length(id) == length(C.clst) %ovelapping                    nevents = length(id);                    Spks.times = Spks.times(id);                    Spks.values = Spks.values(id,:);                    Spks.codes = Spks.codes(id,:);                    Spks.TriggerV = Spks.TriggerV(id);                    ispk = 1:istep:nevents;                else                    nevents = length(C.clst);                    cprintf('red','!!!!!!!!!Cant Resolve Clst-Spikes mismatch\n');                    ispk = 1:istep:nevents;                end            end        else            Spks.codes(:,1) = C.clst;        end        if length(C.clst) >= nevents && sum(C.clst(ispk) > 1) == 0 && sum(C.clst > 1) > 0 %no classified spikes            xspk = find(C.clst > 1);            ispk = [ispk xspk(1) xspk(end)];        end        if topcluster > 0 && sum(C.clst(ispk) == topcluster) == 0 %no spikes for the cluster of interest            xspk = find(C.clst == 2);            ispk = [ispk xspk(1) xspk(end)];        end    end    details.ispk = ispk;    DATA.plotspk.bytrial = 0;    yl = minmax(Spks(1).values(:));    if ~isempty(voffset)        voff = voffset;    elseif length(setprobe) == 1        voff = DATA.voffset - DATA.voffset(p);    else        voff = DATA.voffset-DATA.voffset(p);    end    details.voffset = voff;    if oneprobeonly        Spks = rmfields(Spks(1),'xvalues');        if isfield(Spks,'VRange')            yl = Spks.VRange;        elseif iscell(Spks)            yl = Spks{1}.VRange;        end    elseif ~isempty(ylim)        yl = ylim;    elseif length(Spks) == 3        yl(2) = voff(Spks(3).probe) + Spks(3).VRange(2);        yl(1) = voff(Spks(2).probe) + Spks(2).VRange(1);    elseif isfield(Spks,'xvalues')        yl(2) = voff(max([Spks.xchans Spks.probe])) + Spks.xmaxv;        yl(1) = voff(min([Spks.xchans Spks.probe])) - Spks.xmaxv;    end    details.ylim = yl;    h = PC.PlotSpikes(DATA, pos, ispk, Spks, C, 'fixy',yl,plotargs{:});    id = find(h == 0); %no spikes plotted    for j = id(:)'        ispk = find(C.clst == j);        if length(ispk)        ispk = ispk([1 end]);        x = PC.PlotSpikes(DATA, pos, ispk, Spks, C, 'fixy',yl,'holdon', plotargs{:});        h(j) = x(j,1);        end    end    hold on;    if showmean        plot(C.MeanSpike.mu(mprobe,:),'-','color','k');        for j = 2:size(h,1)            if h(j) > 0 & ishandle(h(j))                color = get(h(j),'color');                color = 1-color;                if j > 2                    if isfield(C.next{j-2},'MeanSpike')                    details.meanh(j) = plot(C.next{j-2}.MeanSpike.ms(mprobe,:),'-','color',color,'linewidth',2);                    end                else                    details.meanh(j) = plot(C.MeanSpike.ms(mprobe,:),'-','color',color,'linewidth',2);                end            end        end        if length(h) < 2             details.meanh(2) = plot(C.MeanSpike.ms(mprobe,:),'-','color',DATA.colors{2},'linewidth',2);        end    end    plot([1 1],[voff(p) voff(p)-scalebar],'k-','linewidth',2); %scale bar    if isfield(DATA,'toplevel')        axdata = get(gca,'UserData');        axdata.toplevel = DATA.toplevel;        axdata.probe = p;        axdata.eid = e;        set(gca,'UserData',axdata);        SpkData.e = e;        SpkData.p = p;        setappdata(gcf,'SpikeData',SpkData)    end