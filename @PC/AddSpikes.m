function [S, Spks] = AddSpikes(DATA, S, e,p, varargin)%[S, Spks] = AddSpikes(DATA, S, e,p, varargin)%Read Spike file and loads into place in S{e,p};%Spks = S{e,p} for convenience =%        use {~, Spks] = AddSikes(DATA, [], e,p) just to get Spks   verbose = 1;    setdata = 0;    ifnew = 0;    useauto = 0;    listtype = PC.GetValue(DATA,'listtype');        args = {};    j = 1;    while j <= length(varargin)        if strncmpi(varargin{j},'allprobes',6)            args = {args{:} varargin{j}};        elseif strncmpi(varargin{j},'autolist',5)            useauto = 1;            listtype = 'autolist';        elseif strncmpi(varargin{j},'ifnew',5)            ifnew = 1;        elseif strncmpi(varargin{j},'setdata',3)            setdata = 1;        end        j = j+1;    end       if isempty(S)        S = PC.GetValue(DATA, 'AllSpikes');    end    setcluster = round(rem(p,1).*10); %in case     p = floor(p);        mnk = GetMonkeyName(DATA.name);    if ~isfield(DATA,'exptid')        DATA.exptid = DATA.CellDetails.exptids;    end    [a,b] = fileparts(DATA.name);    if isempty(b) %name is a directory        [a,b] = fileparts(a);    end    b = regexprep(b,'[MG]([0-9]*)(.*)','$0');    [c,d] = fileparts(a);    xs = '';    if isempty(S) && isappdata(DATA.toplevel,'AllSpikes')        S = getappdata(DATA.toplevel,'AllSpikes');    end    if useauto        C = getappdata(DATA.toplevel,'AutoClusters');    else        C = getappdata(DATA.toplevel,'Clusters');    end    Cl = PC.GetClusterInfo(C,[e p 1]);    if rem(DATA.exptid(e),1) > 0.001        xs = 'a';    end    if DATA.loadautoclusters == 2        useauto = 1;    end    name = [DATA.name '/Spikes/' mnk b '.p' num2str(p)  't' num2str(floor(DATA.exptid(e))) xs '.mat'];    if DATA.loadautoclusters || strcmp(listtype,'autolist')        if strcmp(clust.CutMode(Cl),'ecker')            aname = strrep(name,'Spikes','Ecker/Spikes');        else            aname = strrep(name,'Spikes','AutoSpikes');        end        if exist(aname) && (useauto || ~exist(name))            name = aname;        end    end    if ifnew        isnew = 0;        d = dir(name);        if ~isfield(S{e,p},'Header')            isnew =1;        elseif ~isfield(S{e,p}.Header,'loadtime')            isnew = 1;        elseif length(d) == 1 && d.datenum > S{e,p}.Header.loadtime            isnew = 1;        end    else        isnew = 1;    end            if isnew         if verbose > 0            fprintf('Reading %s at %s',name,datestr(now));        end%if loading new spikes, want to set AllSpikes data, in case caller does not;%may need arg to force this off if need temp loading of spikes (?when?)        setdata = 1;        S{e,p} = ReadSpikeFile(name,args{:});        S{e,p}.probe = p;        S{e,p}.filename = name;        if verbose > 0            if isfield(Cl,'clst')                 nc = length(Cl.clst);                if nc ~= Cl.nspks;                    cprintf('red','Nspks 0%d) does not match length(clst) %d',nc,Cl.nspks);                end            elseif isfield(Cl,'nspks')                 nc = Cl.nspks;            else                nc = NaN;            end            fprintf('   %d Spikes of %d Events in Cluster',size(S{e,p}.values,1),nc);        end                    if isfield(Cl,'trigset') %Check for a second set of trigger events            name = [DATA.name '/Spikes/' mnk b '.p' num2str(p)  't' num2str(1000+floor(DATA.exptid(e))) xs '.mat'];            X = ReadSpikeFile(name,args{:});            S{e,p}.trigset{1} = X;        end        S{e,p} = clust.CheckSpikes(Cl,S{e,p});        if verbose > 0            fprintf('\n');        end    end    Spks = S{e,p};    if setdata         setappdata(DATA.toplevel,'AllSpikes',S);    end             function Spks = CheckSpikeVsCluster(C,Spks)          nevents = length(Spks.times);     if nevents ~= length(C.clst)         cprintf('red','E%dP%d ',C.exptno,C.probe(1));         if Spks.Header.ctime < C.savetime(1)             cprintf('red','Spike File older than cluster, and mismatched count\n%s %d Spikes, %s %d Cluster times\n',...                 datestr(Spks.Header.ctime),nevents,datestr(C.savetime(1)),length(C.clst));                      else             cprintf('red','Mismatched Spike counts:%d Spikes, %d Cluster events\n',nevents,length(C.clst));         end         if nevents > length(C.clst) && isfield(C,'t')             [~,id] = intersect(Spks.times,C.t.*10000);             if length(id) == length(C.clst) %ovelapping                 nevents = length(id);                 Spks.times = Spks.times(id);                 Spks.values = Spks.values(id,:);                 Spks.codes = Spks.codes(id,:);                 if isfield(Spks,'TriggerV')                    Spks.TriggerV = Spks.TriggerV(id);                 end             end         end     end    