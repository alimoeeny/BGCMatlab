function [check, aExpts] = PlotClusterRates(DATA, type,varargin)if isfigure(DATA)    F = DATA;    DATA = GetDataFromFig(F);endverbose = 1;tag = '';markexpts = DATA.markexpts;    currentcell = DATA.currentcell;    listtype = PC.GetValue(DATA,'listtype');    useautolist = 0;    showmu = 1;    setcell = 0;    overlap = 1;    check = [];    j = 1;    while j <= length(varargin)        if strncmpi(varargin{j},'auto',4)            useautolist = 1;            listtype = 'autolist';        elseif strncmpi(varargin{j},'cell',4)            j = j+1;            currentcell = varargin{j};            setcell = 1;        elseif strncmpi(varargin{j},'expt',4)            j = j+1;            markexpts = varargin{j};        elseif strncmpi(varargin{j},'figure',4)            j = j+1;            tag = varargin{j};        elseif strncmpi(varargin{j},'overlap',6)            j = j+1;            overlap = varargin{j};        elseif strncmpi(varargin{j},'nomu',4)            showmu = 0;        elseif strncmpi(varargin{j},'quiet',4)            verbose = 0;        end        j = j+1;    end        Expts = getappdata(DATA.toplevel,'Expts');    Clusters = getappdata(DATA.toplevel,'AutoClusters');    CellList = PC.GetValue(DATA,'CellList');    DATA = PC.Check(DATA,'selectprobe');    if strcmp(listtype,'autolist') && setcell == 0            [e,p] = find(DATA.selectautoprobe > 0);%If user has used cntrl-click to select > 1 cell, show sequnece for both            if length(e) > 1                id = sub2ind(size(DATA.selectautoprobe),e,p);                cid = sub2ind(size(CellList),e,p,DATA.selectautoprobe(id));                cells = unique(CellList(cid));                cells = cells(cells>0);                currentcell = cells;            else                currentcell = DATA.currentcell;            end    end        cellids = unique(CellList(:));        cellids = cellids(cellids > 0);    np = DATA.nprobes;    if isempty(tag)        f = PC.SetFigure(DATA,DATA.tag.rateseq);    else        f = GetFigure(tag);    end    X = get(f,'UserData');    hold off;    colors = mycolors;    AllExpts = [];    AllProbes = [];    Allclid = [];    DATA = PC.CheckCellList(DATA,DATA.currentpoint(1),DATA.currentpoint(2));        ts = now;    if strcmp(type,'rateseqone')        cellids = currentcell;        scaling = 'rates';    else        scaling = 'normalize';    end    %exid is list of true expt numbers, but will have matches in exptlist    if isnumeric(markexpts)        exid = markexpts;    elseif strcmp(markexpts,'none')        exid = DATA.exptid; %expts with cluster info available        exstr = 'All Expts';    else        exid = find(strcmp(markexpts, DATA.expnames));        exstr = markexpts;    end    exlist = find(ismember(DATA.exptid,exid)); %index to DATA.exptid    %If have not loaded allexpts yet, could either force a load here, or only plot%what is loaded.  For now, only plot what is loaded.badex = [];for j = 1:length(exid)    if exid(j) > length(Expts) || isempty(Expts{exid(j)})       badex = [badex exid(j)];    endendexid = setdiff(exid,badex);exid = intersect(exid,DATA.exptid); %only use expts with cluster datarowid = exid;  %not right yet....if length(badex)    exstr = sprintf('%s (Loaded %s)',exstr,sprintf('%d ',exid));endif isempty(exid)    fprintf('No Data available for cell %d in selected Expts\n',cellids);    return;enda = allchild(findobj(allchild(gcf),'flat','type','annotationpane'));if ~isempty(a)    delete(a);endnc = 0;%First build list of times for all expts with clsuter datagaps(1) = Expts{exid(1)}.Header.timeoffset;    Expts{exid(1)}.Header.timeadjust = gaps(1);    starts(1) = Expts{exid(1)}.Trials(1).Start(1)./10000;    for j = 2:length(exid)        durs(j) = (Expts{exid(j)}.Trials(end).TrialStart-Expts{exid(j)}.Trials(1).TrialStart)./10000;        xdur(j) = Expts{exid(j)}.Header.timeoffset-Expts{exid(j-1)}.Header.timeoffset;        gaps(j) = ((Expts{exid(j)}.Trials(1).TrialStart -Expts{exid(j-1)}.Trials(end).TrialStart)./10000)...            +Expts{exid(j)}.Header.timeoffset-Expts{exid(j-1)}.Header.timeoffset -2;%makes a mess of gtie expts (one .mat file). Its calculation above anyway -%? need it for uProbe expts?%            -Expts{exid(j-1)}.Trials(1).TrialStart/10000;        Expts{exid(j)}.Header.timeadjust = sum(gaps);        starts(j) = Expts{exid(j)}.Header.timeoffset-Expts{exid(j)}.Header.timeadjust ...            +Expts{exid(j)}.Trials(1).TrialStart/10000;    end    if length(exid) == 1        X.timeadjust = 0;        X.expstarts = 0;    else%        X.expstarts = starts-2;  %Must be before used real trial%        start.....        X.expstarts = starts;  %time of first trial        X.timeadjust = cumsum(gaps);    end%exid is true expt numbers        X.currentexpt = exid(1);    np = size(CellList,2); %this is the important np (# probes) for calc below    for j = 1:length(cellids)        aExpts = {};        if isfield(DATA,'muCellList') && showmu            [a,b] = find(CellList == cellids(j) | DATA.muCellList == cellids(j));        else            [a,b] = find(CellList == cellids(j));        end                eid = DATA.exptlist(a);%eid is true expt numbers for the cell cellist                [~, id,ia]  = intersect(eid,exid);        a = exlist(ia);        eid = eid(id);% eid is now true expt numbers where cell is defined        % a is list of Rows for Custers{a} etc%        eid = DATA.exptid(a);        b = b(id);        c = ceil(b./np);        p = 1+mod(b-1,np);        for k = 1:length(a)            [Clusters, DATA] = PC.CheckClusterLoaded(DATA,a(k));            C = PC.GetClusterInfo(Clusters,[a(k) p(k) 1]);            [xcl, b] = PC.FindExcludedTrials(DATA,a(k),p(k),c(k),C);            aExpts{k} = PC.CountSpikes(Expts{eid(k)},C,c(k),b.xid);            if CellList(a(k),p(k),c(k)) > 0                 aExpts{k}.Header.cellnumber  = cellids(j);            else                aExpts{k}.Header.cellnumber  = 0;            end        end%AllExpts is row rumbers                AllExpts = cat(1,AllExpts,a);        AllProbes = cat(1,AllProbes,p);        Allclid = cat(1,Allclid,c);        if length(a)            a = PlotRateSequence(aExpts,'color',colors{j},scaling,'offset',(nc-1)*2./overlap,'bytime','callback',{@PC.HitTrial, cellids(j)});            text(max(a.times)*1.01,a.meanrates(end),num2str(cellids(j)),'color',colors{j},'horizontalalignment','left');            hold on;            X.RateRange(cellids(j),:) = minmax(a.rates);            X.handles(cellids(j)) = a.handle;            nc = nc+1;        end    end    axis('tight');    X.yrange = get(gca,'ylim');    X.xrange = get(gca,'xlim');    X.exptlist = exid;    X.cellids = cellids;    set(f,'UserData',X);    if verbose        fprintf('Took %.1f\n',mytoc(ts));    end    set(gcf,'keypressfcn',@PC.RateSeqKeyPressed);    yl = get(gca,'ylim');    extypes = {};    AllExpts = unique(AllExpts);    for j = 1:length(AllExpts)        extypes{j} = Expts{DATA.exptid(AllExpts(j))}.Header.expname;    end    types = unique(extypes);    first = zeros(size(types));    for j = 1:length(AllExpts)        e = DATA.exptid(AllExpts(j)); %real expt numbe        x = find(X.exptlist == e);        id = find(strcmp(Expts{e}.Header.expname,types));        t = Expts{e}.Header.timeoffset-Expts{e}.Header.timeadjust;        t = X.expstarts(x);        h = plot([t t],yl,'--','color',colors{id});        C = PC.GetClusterInfo(Clusters,[AllExpts(j) AllProbes(j) 1]);        if length(cellids) == 1            dstr = sprintf('I%.1f D%.1f',PC.DistanceMeasure(C,Allclid(j),DATA.mahaltype),...                DATA.dropi(AllExpts(j),AllProbes(j),Allclid(j)));        else        dstr = [];        end        if ~first(id)            set(h,'linestyle','-');            h = text(t,yl(2),sprintf('%d %s %s',e,types{id},dstr),'color',colors{id},'VerticalAlignment','top','HorizontalAlignment','right','rotation',90);            first(id) =1;        elseif length(types) == 1            h = text(t,yl(2),sprintf('%d %s',e,dstr),'color','k','VerticalAlignment','top','HorizontalAlignment','right','rotation',90);        else            h = text(t,yl(2),sprintf('%d %s',e,dstr),'color',colors{id},'VerticalAlignment','top','HorizontalAlignment','right','rotation',90);        end    end    if isempty(AllExpts)        title(sprintf('Cell %d No Data %s',cellids,exstr));    elseif length(cellids) == 1        title(sprintf('Cell %d %s',cellids,exstr));        check = CheckExptRates(aExpts);        exid = [check.errs.exptno];        [a,b] = max(abs([check.errs.ff]));        [c,d] = max(abs(log(check.diffs)));        c = log(check.diffs(d));        [e,f] = max(abs([check.errs.slope]));        e = check.errs(f).slope;        fprintf('ExptV/M %.2f. Max diff %.2f (%d), max FF %.2f(%d), slope %.2f (%d)\n',...            check.blkff,c,exid(d),a,exid(b),e,exid(f));        drate = diff(check.blkmean)./median(check.blkmean);        fprintf('Norm Rate Changes%s\n',sprintf(' %.2f',drate));        for j = 1:check.njump            e = find(rowid == check.jumps.ex(2,j));            t = X.expstarts(e);            h = plot([t t],yl,'-','color','k','linewidth',2);            xy = gui.data2norm(gca,[t 0]);            y = get(gca,'position');            annotation('line',[xy(1) xy(1)],[0 y(2)]);        end            end    cmenu = uicontextmenu;    cellid = unique(CellList);    cellid = cellid(cellid>0);    for j = 1:length(cellid)        uimenu(cmenu,'label',sprintf('Cell %d',cellid(j)),'Callback',{@PC.SetRateseqPlot, cellid(j)});    end    set(gca,'UIContextMenu',cmenu);    