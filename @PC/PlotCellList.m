function DATA = PlotCellList(DATA, varargin)%DATA = PlotCellList(DATA, varargin)% ...,'showfig') forces figure creation if not present% ...,'autolist') plots the automatically generated version% ...,'nomarks') don't show any of the marking boxesplotmahal = 0;force = 0;reload = 0;showmsg = '';calcdrift = 0;nomarks = 0;calltag = 3;forceCellList = [];dropi = [];useautolist = 0;if isfigure(DATA)    F = DATA;    DATA = GetDataFromFig(F);endoffset = DATA.clusteroffset;muCellList = []; listtype = 'default';plottype = 'image';j = 1;while j <= length(varargin)    if strncmpi(varargin{j},'autolist',5) %Force figure creation        useautolist = 1;        calltag = 'autolist';        listtype = 'autolist';        if length(varargin) > j && isnumeric(varargin{j+1})            j = j+1;            forceCellList = varargin{j};        end    elseif strncmpi(varargin{j},'lineplot',5)         plottype = 'lines';    elseif strncmpi(varargin{j},'offset',5)         j = j+1;        offset = varargin{j};    elseif strncmpi(varargin{j},'showfig',5) %Force figure creation        force = 1;    elseif strncmpi(varargin{j},'reload',5) %reload from disk        reload = 1;    elseif strncmpi(varargin{j},'calltag',5) %arg to give to PC.HitImage        j = j+1;        calltag = varargin{j};    elseif strncmpi(varargin{j},'nomarks',5) %no extra boxes - add different ones        nomarks = 1;    end    j = j+1;endif ~isfield(DATA,'toplevel')    force = 1;    DATA.toplevel = 0;endif isfield(DATA,'muCellList')    muCellList = DATA.muCellList;endif isfield(DATA,'dropi')    dropi = DATA.dropi;endif useautolist    if isfield(DATA.tag,'autocelllist')        tag = DATA.tag.autocelllist;    else        DATA.tag.autocelllist = ['auto' DATA.tag.celllist];        tag = DATA.tag.autocelllist;        endelse    tag = DATA.tag.celllist;endif force    f = PC.SetFigure(DATA, tag);    if double(DATA.toplevel) == 0        DATA = GetDataFromFig(f);    endelse    f = FindFig(tag);    if isempty(f)        return;    else        figure(f);    endendif reload        DATA = PC.LoadCellFile(DATA);endif useautolist    if ~isempty(forceCellList)        CellList = forceCellList;    else        CellList = DATA.autolist.CellList;    end    if isfield(DATA.autolist,'muCellList')        muCellList = DATA.autolist.muCellList;    end    if isfield(DATA,'selectautoprobe')        selectprobe = DATA.selectautoprobe;    else        selectprobe = DATA.selectprobe;    end    if isfield(DATA.autolist,'dropi')        dropi = DATA.autolist.dropi;    endelse    CellList = DATA.CellList;    selectprobe = DATA.selectprobe;endif isempty(CellList)    return;endif isempty(dropi)    dropi = zeros(size(CellList));elseif size(CellList,1) > size(dropi,1)    eid = find(ismember(DATA.CellDetails.exptids,DATA.exptid));    if length(eid) == size(dropi,1)        dropi(eid,:,:) = dropi;    else        dropi(end+1:size(CellList,1),:,:) = 0;    endendDATA.fig.celllist = f;DATA.markcell = AddField(DATA.markcell,{'duplicates' 'autodropcells'});if strncmp(plottype,'line',4)    PlotCellLines(DATA, CellList, listtype);    return;endcolors = mycolors;subplot(1,1,1);%set(f,'UserData',DATA.toplevel);hold off;set(gca,'position',[0.03  0.1 0.94 0.85]);if plotmahal    im = zeros(size(CellList));    id = find(sum(CellList,3) > 0);    X = squeeze(DATA.mahal(:,:,1));    im(id) = X(id);endif isfield(DATA,'nclusters')    ncls = DATA.nclusters;    if size(ncls,1) < size(CellList,1)        ncls(size(CellList,1),:) = 1;    elseif size(ncls,1) > size(CellList,1)        id = find(ismember(DATA.CellDetails.exptids,DATA.exptid));        ncls = DATA.nclusters(id);    endelse    ncls = ones(size(CellList));endfor j = 1:size(CellList,1)    for k = 1:size(CellList,2)        id = find(CellList(j,k,:) > 0);        if max(id) > ncls(j,k)            ncls(j,k) = max(id);        end    endendnc = max(ncls,[],1); %max # clusters in any one expt, for each probe%so nc has length = to number of probesbadexpts = [];if plotmahal    imh = imagesc(im,'buttondownfcn',{@PC.HitImage, 1});    caxis([0 5]);else    for j = 1:size(CellList,2)*2        if size(CellList,3) > offset            CellIm(:,j) = CellList(:,ceil(j/2),1+offset);        else            CellIm(:,j) = 0;        end    end    id = find(nc >1);    if size(CellList,3) > offset+1        for j = 1:length(id)            tid = find(ncls(:,id(j)) > 1);            CellIm(tid,id(j)*2) = CellList(tid,id(j),offset+2);        end    end            if isfield(DATA.ArrayConfig,'badprobes')        bid = find(DATA.ArrayConfig.badprobes);        id = find(CellIm(:,bid) > 0);        CellIm(:,bid*2) = -2;        CellIm(:,(bid*2)-1) = -2;        badprobes = bid;    end    if isfield(DATA.ArrayConfig,'badexpts')        bid = find(DATA.ArrayConfig.badexpts);        CellIm(bid,:) = -2;        badexpts = bid;    end    if isfield(DATA,'marked')        [aid, bid] = find(DATA.marked >= 100); %Bad Expts/probes        id = find(~ismember(aid, badexpts) & ~ismember(bid,badprobes));        for j = 1:length(id)            fprintf('E%dP%d Erroneously marked bad\n',aid(id(j)),bid(id(j)));        end        if ~isempty(id)            showmsg = 'Some Clusters marked bad not in ArrayConfig';        end    end    if DATA.markcell.duplicates == 0        CellIm(CellIm<0) = -1;    else        duplicates = CellIm<0;        CellIm(duplicates) = abs(CellIm(duplicates));    end    if size(CellIm,1) < size(CellList,1)        Cellim(size(CellList,1),1) = 0;    end        imh = imagesc([0.75 size(CellList,2)+0.25],[1 size(CellList,1)],CellIm);    %set(imh,'buttondownfcn',{@PC.HitImage, calltag});    set(gcf,'Windowbuttonupfcn',{@PC.HitImage, calltag});    set(gcf,'Windowbuttondownfcn',{@PC.HitImage, 'down'});    set(gcf,'WindowButtonmotionfcn',{@PC.WindowMotion, 'celllist'});    colormap('jet');    if min(CellIm(:) < 0)        cmap = colormap(gca);        cmap(1,:) = [0 0 0];        colormap(gca,cmap);    else        cmap = colormap(gca);            endendhold on;showlines = 2;  %may reactivate one day....%Get cell colors before making context menuif showlines == 2    cells = unique(CellList);    cells = cells(cells > 0);    cm = colormap(gca);    yl = get(gca,'ylim');    for j = 1:length(cells)        id = find(CellList == cells(j));        [a,y,b] = ind2sub(size(CellList),id);        h = text(mean(y)-1+mean(b)/3,yl(1),sprintf('%d',cells(j)));        set(h,'verticalalignment','bottom','buttondownfcn',{@PC.HitImage, calltag});        cid = round(j .*length(cm)./max(cells));        set(h,'color',cm(cid,:));        DATA.cellcolors{cells(j)} = cm(cid,:);        if min(a) > 1            [a, ai] = min(a);            h = text(y(ai)-0.5+b(ai)/3,a-0.5,sprintf('%d',cells(j)),'color','w');                        set(h,'verticalalignment','bottom','horizontalalignment','center','buttondownfcn',{@PC.HitImage, calltag});        end    endendcmenu = PC.AddContextMenu(DATA,'cellplot',listtype);set(imh,'uicontextmenu',cmenu);set(gca,'uicontextmenu', cmenu);set(gcf, 'KeyPressFcn',{@PC.KeyPressed,calltag},'Keyreleasefcn',{@PC.KeyReleased, calltag});if nomarks    return;endif DATA.plot.cellgrid > 0 && DATA.markcell.gridfor p = 1:DATA.plot.cellgrid:size(CellList,2)    plot([p-0.5 p-0.5],get(gca,'ylim'),'k:','buttondownfcn',{@PC.HitImage, calltag});endfor p = 1:DATA.plot.cellgrid:size(CellList,1)    plot(get(gca,'xlim'),[p-0.5 p-0.5],'k:','buttondownfcn',{@PC.HitImage, calltag});endendif strcmp(listtype,'autolist')    eid = 1:length(DATA.exptid);elseif isfield(DATA,'exptid')    [a, eid] = intersect(DATA.CellDetails.exptids,DATA.exptid);    if offset >= size(CellList,3)        CellList(eid,:,2+offset) = 0;    end    cells = unique(CellList(eid,:,1+offset));    cells = cells(cells > 0);else    eid = 1:length(DATA.CellDetails.exptids);endif showlines == 1    for j = 1:length(cells)        [x,y] = find(CellList(eid,:,1+offset) == cells(j));        for k = 1:length(y)            if DATA.nclusters(x(k),y(k)) > 1                plot([y(k)-0.25 y(k)-0.25], [x(k)-0.5 x(k)+0.5],'-','color',colors{j},'linewidth',2,'buttondownfcn',{@PC.HitImage, calltag});            else                plot([y(k) y(k)], [x(k)-0.5 x(k)+0.5],'-','color',colors{j},'linewidth',2,'buttondownfcn',{@PC.HitImage, calltag});            end        end        [a,b] = min(x);        h = text(y(b),x(b)-1,sprintf('%d',cells(j)));        set(h,'color',colors{j},'buttondownfcn',{@PC.HitImage, calltag});    end        if size(CellList,3) > offset+1        cells = unique(CellList(:,:,2+offset));        cells = cells(cells > 0);        for j = 1:length(cells)            [x,y] = find(CellList(:,:,2+offset) == cells(j));            for k = 1:length(y)                plot([y(k)+0.25 y(k)+0.25], [x(k)-0.5 x(k)+0.5],'-','color',colors{j},'linewidth',2,'buttondownfcn',{@PC.HitImage, calltag});            end            [a,b] = min(x);            h = text(y(b),x(b)-1,sprintf('%d',cells(j)));            set(h,'color',colors{j},'buttondownfcn',{@PC.HitImage, calltag});        end    endelseendif ~isempty(muCellList)    ncells = max(CellList(:));    mu = sum(muCellList,3);  %can mark cl2 as MU  equivalent of cellX    nmu = max(mu(:));    if nmu > ncells %use this for color scaling        ncells = nmu;    end    [e,p] = find(mu > 0);    for j = 1:length(e)        c = ceil(size(cmap,1) .* mu(e(j),p(j))./ncells);        cl = find(muCellList(e(j),p(j),:) > 0);        if cl(1) > 1            PC.DrawBox(e(j),p(j),calltag,'color',cmap(c,:),'box2');        else            PC.DrawBox(e(j),p(j),calltag,'color',cmap(c,:));        end    endendiscellim = sum(CellList,3) > 0;if size(CellList,3) >= 2+offset    iscellimb = squeeze(CellList(:,:,2+offset)) > 0;else    iscellimb = zeros(size(iscellim));end%reduce size in case all clsuters not loaded yetif size(dropi,1) == size(iscellim,1)    iscellim = iscellim(1:size(dropi,1),:);     iscellimb = iscellimb(1:size(dropi,1),:); endif DATA.markcell.candidates    cqid = [];    if strcmp(listtype,'autolist')        if isfield(DATA.autolist,'candidates')            X = getappdata(DATA.toplevel,'AutoCellList');            cqii = ind2sub(size(X.I),DATA.autolist.candidates);            [cq, cqid] = sort(X.I(cqii),'descend');            cqii = cqii(cqid);            [x,y,cl] = ind2sub(size(CellList),DATA.autolist.candidates);        else            x = [];        end    else        [x,y] = find(isnan(CellList(:,:,1)));    end    if ~isfield(DATA,'currentsquare')        DATA.currentsquare = [0 0 0];    end    for j = 1:DATA.currentsquare(1)        PC.DrawBox(x(cqid(j)),y(cqid(j)),calltag,'color','y');    end    j = DATA.currentsquare(1)+1;    if j < length(cqid)        pos = [x(cqid(j)) y(cqid(j)) cl(cqid(j))];        DATA.currentsquare(2:4) = pos;        PC.DrawBox(pos(1),pos(2),calltag,'color','g');        fprintf('Candidate %d E%dP%d.%d I%.1fD%.1f\n',j,pos,X.I(cqii(j)),X.D(cqii(j)));    end            if isfield(DATA,'missing')    [x,y] = find(DATA.missing);    for j = 1:length(x)        PC.DrawBox(x(j),y(j),calltag,'color','y');    end    endelseif DATA.markcell.autodropcells && isfield(DATA.autolist,'dropcells')    [x,y,cl] = ind2sub(size(CellList),DATA.autolist.dropcells);        for j = 1:length(x)        PC.DrawBox(x(j),y(j),calltag,'color','g');    endendif DATA.markcell.duplicates    [x,y] = find(duplicates);    y = ceil(y/2);    for j = 1:length(x)        PC.DrawBox(x(j),y(j),calltag,'color','k');    endendif DATA.markcell.goodmu && isfield(DATA,'marked')    [x,y] = find(DATA.marked ==4);    for j = 1:length(x)        PC.DrawBox(x(j),y(j),calltag,'color','g');    end    [x,y] = find(DATA.marked ==2);    for j = 1:length(x)        PC.DrawBox(x(j),y(j),calltag,'color','g');    endendif DATA.markcell.auto    [x,y] = find(DATA.isauto ==1);    for j = 1:length(x)        PC.DrawBox(x(j),y(j),calltag ,'color','y');    end    [x,y] = find(DATA.isauto ==3); %these are manualendif DATA.markcell.dropi > 0 && ~isempty(dropi)    testing = 0;    dropi(dropi == 0) = NaN;    if size(dropi,3) >= 1+offset        [x,y] = find(squeeze(dropi(:,:,1+offset)) < DATA.markcell.dropi & iscellim);        for j = 1:length(x)            if size(CellList,3) > 1+offset && CellList(x(j),y(j),2+offset) > 0 && CellList(x(j),y(j),1+offset) > 1                PC.DrawBox(x(j),y(j),calltag ,'color','m','box1');            elseif CellList(x(j),y(j),1+offset) > 1                PC.DrawBox(x(j),y(j),calltag ,'color','m');            elseif testing                PC.DrawBox(x(j),y(j),calltag ,'color','y','box1');            end        end        if size(dropi,3) > 1+offset            [x,y] = find(squeeze(dropi(:,:,2+offset)) < DATA.markcell.dropi & iscellimb);            for j = 1:length(x)                PC.DrawBox(x(j),y(j),calltag ,'box2','color','m');            end        end    end    if size(dropi,3) > 1+offset && size(CellList,3) > 1+offset        [x,y] = find(squeeze(dropi(:,:,2+offset)) < DATA.markcell.dropi & iscellim);        for j = 1:length(x)            if CellList(x(j),y(j),2+offset) > 0                 PC.DrawBox(x(j),y(j),calltag ,'color','m','box2');            end        end    endendif DATA.markcell.mahal > 0    X = max(DATA.mahal(:,:,[1 3]),[],3);    [x,y] = find(X < DATA.markcell.mahal & iscellim);    for j = 1:length(x)        PC.DrawBox(x(j),y(j),calltag ,'color','r');    endendif DATA.markcell.ellipses > 0    [x,y] = find(DATA.cutshape ==0 & iscellim);    for j = 1:length(x)        PC.DrawBox(x(j),y(j),calltag ,'color','m');    endendif DATA.markcell.tagged > 0 && isfield(DATA,'tagged');    [x,y] = find(DATA.tagged);    for j = 1:length(x)        PC.DrawBox(x(j),y(j),calltag ,'color','y');    end    for j = 1:length(DATA.Comments)        PC.DrawBox(DATA.Comments(j).ex,DATA.Comments(j).p,calltag ,'color','g');    endendif DATA.markcell.readmethod > 0    Clusters = getappdata(DATA.toplevel,'Clusters');    DATA.readmethod = CellToMat(Clusters,'exptreadmethod');    [x,y] = find(DATA.readmethod ==0);    for j = 1:length(x)        PC.DrawBox(x(j),y(j),calltag ,'color','y');    endendif DATA.markcell.quick > 0    Clusters = getappdata(DATA.toplevel,'Clusters');    mstatus = CellToMat(Clusters,'manual');    quickstatus = CellToMat(Clusters,'quick');    [x,y] = find(quickstatus ==1);    for j = 1:length(x)        PC.DrawBox(x(j),y(j),calltag ,'color','y');    end    [x,y] = find(mstatus == 2);    for j = 1:length(x)        PC.DrawBox(x(j),y(j),calltag ,'color','m');    endendif  isfield(DATA,'fitjumps')    DATA.fitjumps(isnan(DATA.fitjumps)) = 0;    drift = [0 cumsum(DATA.fitjumps)];    p = DATA.currentpoint(2)+drift(DATA.currentpoint(1));    plot(p-drift,1:length(drift),'w-','buttondownfcn',{@PC.HitImage, calltag});endif DATA.show.ed && isfield(DATA,'probesep') && isfield(DATA,'electrodedepth')    probesep = median(DATA.probesep(DATA.probesep > 0));    epos = (DATA.electrodedepth - DATA.electrodedepth(DATA.currentpoint(1))) * 1000./probesep;    p = DATA.currentpoint(2);    plot(p-epos,1:length(epos),'w-','buttondownfcn',{@PC.HitImage, calltag});endif DATA.markcell.expnames    for j = 1:length(DATA.exptlist)        h = text(0.5,j,PC.ExLabel(DATA,j,'row'),'horizontalalignment','left','buttondownfcn',{@PC.HitImage, calltag},'color','w');    endendif isfield(DATA,'plotcells') && DATA.plotcells.showmahal > 0    m = (max(DATA.mahal(:,:,[1 3]),[],3) > DATA.plotcells.showmahal);    dp = (squeeze(DATA.GaussFitdp(:,:,2)) > DATA.plotcells.showfitdp & sum(DATA.gmfitpos,3) == 2);    peakok = (abs(DATA.peakdiff) < 1);    dropok = (squeeze(dropi(:,:,1)) > 1);    [aid, bid] = find(m & peakok & dropok);    for j = 1:length(aid)        PC.DrawBox(aid(j),bid(j),calltag ,'color','r');    end    [cid, did] = find(dp & peakok & dropok);    for j = 1:length(cid)        PC.DrawBox(cid(j),did(j),calltag ,'color','g');    end    [aid, bid] = find(dp & m & peakok & dropok);    for j = 1:length(aid)        PC.DrawBox(aid(j),bid(j),calltag ,'color','w');    endendif sum(selectprobe(:)) > 0   PC.MarkSelections(DATA, selectprobe,calltag, cmenu);elseif isfield(DATA,'currentpoint')    h = PC.DrawBox(DATA.currentpoint(1),DATA.currentpoint(2),calltag ,'color','w','uicontextmenu',cmenu);endit = findobj(allchild(gcf),'flat','Tag','CellNumberId');if length(it) == 1    set(it,'value',DATA.currentcell);endif isfield(DATA, 'markexpts')    PC.MarkExpts(DATA, DATA.markexpts);endif ~isempty(showmsg)   acknowledge(showmsg,DATA.toplevel);endif isfield(DATA.plot,'exrange') && diff(DATA.plot.exrange) > 0    set(gca,'ylim',DATA.plot.exrange);endif nargout == 0    SetData(DATA);endfunction PlotCellLines(DATA, CellList, listtype, varargin)GetFigure('CellLines','parent',DATA.toplevel);colors = mycolors(10);cells = unique(CellList);cells = cells(cells > 0);symbols = 'osx^osx^osx^osx^osx^osx^';hold off;for j = 1:length(cells)    [e,p,cl] = celllist.ind2sub(CellList,find(CellList == cells(j)));    c = colors{1 + mod(j-1,10)};    h(j) = plot(p+cl./10,e,'-','marker',symbols(ceil(j/10)),'color',c,'buttondownfcn',{@PC.HitImage, 'lineplot' listtype});    linedata.cell = cells(j);    linedata.start = [e(1),p(1),cl(1)];    set(h(j),'UserData',linedata);    hold on;    text(p(1)+(cl(1)-1)/10,e(1),sprintf('%d',cells(j)),'color',c,'horizontalalignment','right');endset(gca,'ydir','reverse');